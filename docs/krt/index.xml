<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konstellation â€“ KRT</title><link>https://konstellation-io.github.io/website/docs/krt/</link><description>Recent content in KRT on Konstellation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://konstellation-io.github.io/website/docs/krt/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Concepts</title><link>https://konstellation-io.github.io/website/docs/krt/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/concepts/</guid><description>
&lt;h2 id="what-is-krt">What is KRT?&lt;/h2>
&lt;p>It stands for &lt;strong>Konstellation Runtime Transport&lt;/strong>. Is the file format used in Konstellation as an easy way to move
between Development (KDL) to Production (KRE) environments.&lt;/p>
&lt;p>A KRT file is a &lt;strong>single and self-contained file&lt;/strong> with everything needed for a solution to be deployed on KRE. Is compressed
in &lt;code>.tar.gz&lt;/code> format and renamed to &lt;code>.krt&lt;/code> extension, it contains definition and all components of Runtime Version.&lt;/p>
&lt;p>A KRT file defines and pack a complete Runtime Version, including:&lt;/p>
&lt;ul>
&lt;li>a definition YAML file named &lt;code>krt.yml&lt;/code>.&lt;/li>
&lt;li>source code of all components.&lt;/li>
&lt;li>assets needed by each component.&lt;/li>
&lt;/ul>
&lt;h2 id="entities">Entities&lt;/h2>
&lt;p>These entities are used to in a KRT file to define how Version&amp;rsquo;s components interoperate:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#krt-yaml-file">KRT YAML file&lt;/a>&lt;/li>
&lt;li>&lt;a href="#entrypoint">Entrypoint&lt;/a>&lt;/li>
&lt;li>&lt;a href="#workflows">Workflows&lt;/a>&lt;/li>
&lt;li>&lt;a href="#nodes">Nodes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#runners">Runners&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="krt-yaml-file">KRT YAML file&lt;/h2>
&lt;p>It is a declarative file describing the content of the KRT. It has general description of the Runtime Version,
a gRPC entrypoint for the Version, a list of nodes that are connected between each other in different workflows.&lt;/p>
&lt;p>The yaml file connects all these entities together, Entrypoint, Workflow, Nodes and Runners in order to define a Version
and the way it works.&lt;/p>
&lt;p>Learn about the fields in the &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/specs/">KRT YAML specs&lt;/a> and see a working
&lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/define_krt_yml/">krt.yml example&lt;/a>&lt;/p>
&lt;h2 id="entrypoint">Entrypoint&lt;/h2>
&lt;p>A Version defines its communication with the outside world through its entrypoint. This is a gRPC server
defined in proto buffer format containing messages and services to interact with workflows inside the Version.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 910px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/krt/concepts/entrypoint_example_hu8701a1e7995c95d39a92b454faad3e38_63313_900x0_resize_q75_catmullrom.jpg" width="900" height="328">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Entrypoint example
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Each service defined in the proto file is connected to a workflow in the &lt;code>krt.yml&lt;/code> file definition.&lt;/p>
&lt;h2 id="workflows">Workflows&lt;/h2>
&lt;p>A Workflow is a sequence of tasks used to process incoming messages from the outside world and returns a response.
Each task is a node of a graph that takes an input message and generates an output for the next node. The last node&amp;rsquo;s
output is used as response to the incoming message.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 910px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/krt/concepts/basic_workflow_example_hu7a5b5d5cc96d9ada230aeb87ed5b9159_72389_900x0_resize_q75_catmullrom.jpg" width="900" height="261">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Example of a basic workflow that makes a prediction using three nodes
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Each workflow can have one or more nodes, depending on how many steps are needed to process a given input message.&lt;/p>
&lt;p>A workflow is connected to the outside world through a service defined in KRT entrypoint. This entrypoint is a gRPC
server that handle incoming calls from third parties gRPC clients and deliver them as input messages to the first
node in the workflow and wait for the last node output to send a response to it corresponding gRPC client call.&lt;/p>
&lt;p>Once a Version is started, all nodes from all workflow are created as a POD in kubernetes.&lt;/p>
&lt;h2 id="nodes">Nodes&lt;/h2>
&lt;p>A Node is a task inside a workflow. It has two main parts, a runner image, and the source code files specific to perform
its task.&lt;/p>
&lt;p>Nodes have a single responsibility consisting on receive an input message, perform a task and return an output message.
This is achieved with handler functions defined in source code files specified in the KRT file.&lt;/p>
&lt;p>Once the node is running it will look for two handler functions, one at starting time for initialization, and a second
one to process incoming messages, these functions are called init handler and message handler respectively. Init handler
is optional and will be executed only once upon node starting to run. Message handler is mandatory and will
be executed each time the node receives a message.&lt;/p>
&lt;h2 id="runners">Runners&lt;/h2>
&lt;p>Runners are base docker images, provided by Konstellation team, that can be used for nodes to run code on different
programming languages. Each image includes language specific tools to integrate itself as part of a workflow.&lt;/p></description></item><item><title>Docs: KRT YAML specs</title><link>https://konstellation-io.github.io/website/docs/krt/specs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/specs/</guid><description>
&lt;p>A KRT yaml file is a declarative file describing the content of the KRT. It has general description of the Version, a
GRPC entrypoint for the Runtime Version, nodes that are
connected between each other to form workflows that will be access through GRPC services defined on the entrypoint.&lt;/p>
&lt;p>You can see an &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/define_krt_yml/#example-file">example &lt;code>krt.yml&lt;/code> file&lt;/a>&lt;/p>
&lt;h2 id="fields-specs">Fields Specs&lt;/h2>
&lt;p>Here is a description of each field divided in five main concepts that make a KRT file:&lt;/p>
&lt;h3 id="metadata">Metadata&lt;/h3>
&lt;p>Descriptive information of the Runtime Version.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>version&lt;/strong>: the unique ID of this version.&lt;/li>
&lt;li>&lt;strong>description&lt;/strong>: brief text describing the content or functionality of this version.&lt;/li>
&lt;/ul>
&lt;h3 id="entrypoint">Entrypoint&lt;/h3>
&lt;p>This section describes how to access the Runtime Version.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>entrypoint&lt;/strong>:
&lt;ul>
&lt;li>&lt;strong>proto&lt;/strong>: protobuffer file describing messages and services contained in this Runtime Version.&lt;/li>
&lt;li>&lt;strong>image&lt;/strong>: base image adn tag used to run the entrypoint service. It&amp;rsquo;s provided by Konstellation registry.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="configuration">Configuration&lt;/h3>
&lt;p>This section describes all variables and files that are environment related and would be configured once the Runtime Version
is uploaded to a KRE instance. This includes sensible data that should not be included on the KRT file, for example passwords.&lt;/p>
&lt;p>All configuration defined here is mandatory, the Runtime Version won&amp;rsquo;t run if any of them is undefined.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config&lt;/strong>:
&lt;ul>
&lt;li>&lt;strong>variables&lt;/strong>: list of variable names that needs to be defined in KRE.&lt;/li>
&lt;li>&lt;strong>files&lt;/strong>: list of file names that needs to be filled in KRE.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="nodes">Nodes&lt;/h3>
&lt;p>This section includes a list of all existing components in the KRT file. Each component of a Runtime Version is a node.
To define each node in the krt file, you need to specify a name, a base image and its main source file.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>nodes&lt;/strong> (a list of):
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>: an identifier text, must be unique in the node list.&lt;/li>
&lt;li>&lt;strong>image&lt;/strong>: a base image provided by Konstellation used to run this node. It&amp;rsquo;s provided by Konstellation registry.&lt;/li>
&lt;li>&lt;strong>src&lt;/strong>: a path relative to the root of the KRT file pointing to the source file used to run this component.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="workflows">Workflows&lt;/h3>
&lt;p>This section includes the list of workflows contained in the KRT file. Each workflow connects one or more nodes between
each other and with a service defined in the entrypoint proto file.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>workflows&lt;/strong> (a list of):
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>: an identifier text, must be unique in the workflow list.&lt;/li>
&lt;li>&lt;strong>entrypoint&lt;/strong>: the name of a serviced defined in the proto buffer file of the entrypoint. See &lt;code>entrypoint.proto&lt;/code> above.&lt;/li>
&lt;li>&lt;strong>sequential&lt;/strong>: a list of node names that are connected sequentially as part of this workflow. All names should
exist on the node list defined above.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Tasks</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/tasks/</guid><description>
&lt;p>All this task will refer to the same example project.&lt;/p>
&lt;p>This project is divided in two process, first is a prediction process one to make predictions and one to collect metrics.
This two process are called workflows.&lt;/p>
&lt;p>The prediction workflow is divided into three nodes, first the input message is formatted, then an AI model performs a
prediction, and finally the prediction is formatted to a desired output.&lt;/p>
&lt;p>The second workflow is used to match real world data with past predictions to be used in data analysis to monitor model
performance.&lt;/p>
&lt;p>Now you know the example project, these are the task you need to do in order to create a KRT file.&lt;/p></description></item></channel></rss>
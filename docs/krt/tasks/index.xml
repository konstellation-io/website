<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konstellation â€“ Tasks</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/</link><description>Recent content in Tasks on Konstellation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://konstellation-io.github.io/website/docs/krt/tasks/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Define a krt.yml file</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/define_krt_yml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/tasks/define_krt_yml/</guid><description>
&lt;p>This is the example &lt;code>krt.yml&lt;/code> file for the example project shown &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/">here&lt;/a>.&lt;/p>
&lt;p>Here you can see how the two parts of the projects are divided in two workflows. The first workflow, called &lt;code>prediction&lt;/code>,
has three nodes, the first input to a proper format (node &lt;code>etl&lt;/code>), performing a prediction (node &lt;code>execute-dl-model&lt;/code>), and
the last node convert the prediction to different format (node &lt;code>create-output&lt;/code>).&lt;/p>
&lt;p>The second workflow called &lt;code>save-client-metrics&lt;/code> that collects metrics to match predictions with real data for later
analysis. It only has one node called &lt;code>client-metrics&lt;/code>.&lt;/p>
&lt;p>This example Version has two environment variables called &lt;code>API_KEY&lt;/code> and &lt;code>API_SECRET&lt;/code> that would need to be setup once
the version is uploaded to KRE. Same as with the file variable called &lt;code>HTTPS_CERT&lt;/code>.&lt;/p>
&lt;p>Note that the Entrypoint &lt;code>public_input.proto&lt;/code> should have two services defined called &lt;code>MakePrediction&lt;/code> and
&lt;code>SaveClientMetric&lt;/code> to allow external call to be routed to each workflow correctly.&lt;/p>
&lt;p>Learn more about &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/create_an_entrypoint/">how to create an entrypoint&lt;/a>.&lt;/p>
&lt;h2 id="example-krtyml">Example krt.yml&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>example-project&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">description&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>This&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>is&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>an&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>example&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>of&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>a&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>ML&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>project.&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>public_input.proto&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-runtime-entrypoint&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">variables&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- API_KEY&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- API_SECRET&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">files&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- HTTPS_CERT&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">nodes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>etl&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-py&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>src/etl/execute_etl.py&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>execute-dl-model&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-py&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>src/execute_model/execute_model.py&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>create-output&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-py&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>src/output/output.py&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-go&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>bin/client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">workflows&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>prediction&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>MakePrediction&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sequential&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- etl&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- execute-dl-model&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- create-output&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>save-client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>SaveClientMetric&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sequential&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Create an Entrypoint</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/create_an_entrypoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/tasks/create_an_entrypoint/</guid><description>
&lt;p>To connect workflows with third party clients you need a gRPC server called Entrypoint in your KRT file.&lt;/p>
&lt;p>But you don&amp;rsquo;t need to implement any code, just define its messages and services.&lt;/p>
&lt;p>In the &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/">example project&lt;/a> there are defined two workflows that need to be exposed
through the entrypoint. So in the entrypoint proto file you need to create two services and messages as follows:&lt;/p>
&lt;h3 id="example-public_inputproto">Example public_input.proto&lt;/h3>
&lt;pre>&lt;code>syntax = &amp;quot;proto3&amp;quot;;
package entrypoint;
service Entrypoint {
rpc Prediction(PredictionRequest) returns (PredictionResponse) {};
rpc SaveMetrics(MetricsRequest) returns (MetricsResponse) {};
};
message PredictionRequest {
string name = 1;
... add more fields here ...
}
message PredictionResponse {
string prediction = 1;
... add more fields here ...
}
message MetricsRequest {
... add fields here ...
}
message MetricsResponse {
... add fields here ...
}
&lt;/code>&lt;/pre></description></item><item><title>Docs: Coding a node</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/coding_a_node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/tasks/coding_a_node/</guid><description>
&lt;p>Here you will learn how to program a node in different languages. Currently, KRE supports Python and Golang.&lt;/p>
&lt;h2 id="python">Python&lt;/h2>
&lt;p>TODO: show example python code.&lt;/p>
&lt;h2 id="golang">Golang&lt;/h2>
&lt;p>TODO: show example golang code.&lt;/p>
&lt;h3 id="compiling-binaries">Compiling binaries&lt;/h3>
&lt;p>KRE provides support for nodes running Golang code, but currently you need to compile the binary before generating the
KRT file. This may be also automated in future releases.&lt;/p>
&lt;p>Compile your binary for the architecture you need (amd/arm) and reference the resulting binary from your &lt;code>krt.yml&lt;/code>.&lt;/p></description></item><item><title>Docs: Create a KRT</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/create_krt_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/tasks/create_krt_file/</guid><description>
&lt;p>The end goal of Konstellation is to automate the generation of KRT files directly from KDL. This is currently on the list
of features to add on KDL but not developed yet.&lt;/p>
&lt;p>So, in order to create a KRT file, you need to create your own custom scripts to generate KRT files. Basically you need
to create a &lt;code>.tar.gz&lt;/code> file with the content of your version and then change its extension to &lt;code>.krt&lt;/code>.&lt;/p>
&lt;p>You can see a working example of this script on KRE repo: &lt;a href="https://github.com/konstellation-io/kre/blob/master/krt-template/build_krt.sh">build_krt.sh&lt;/a>&lt;/p>
&lt;h2 id="structure-guidelines">Structure guidelines&lt;/h2>
&lt;p>The mandatory rules are these:&lt;/p>
&lt;ul>
&lt;li>a &lt;code>krt.yml&lt;/code> file on the root folder.&lt;/li>
&lt;li>(optional) a README.md file inside a &lt;code>docs&lt;/code> folder.&lt;/li>
&lt;/ul>
&lt;p>Other than that you are free to structure the content as you see fit.&lt;/p>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>This is how we structure or KRT files, and it&amp;rsquo;s probably the way it will be exported automatically from KDL.&lt;/p>
&lt;p>&lt;em>&lt;strong>NOTE&lt;/strong>&lt;/em>: This example match with the &lt;code>krt.yml&lt;/code> file used in &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/define_krt_yml/#example-file">krt.yml file example&lt;/a>&lt;/p>
&lt;pre>&lt;code>&amp;lt;root_folder&amp;gt;
- bin
- client-metrics # Go compiled binary for client-metric node
- docs
- README.md # Documentation showed as HTML on KRE
- models # Model assets used on execute_model node
model.joblib
encoder.joblib
- src # Source code of each node
- etl
- execute_etl.py
- execute_model
- execute_model.py
- output
- output.py
- client-metrics
- main.go
- go.mod
- kry.yml # KRT file definition
- public_input.proto # Used to define entrypoint GRPC messages and services.
&lt;/code>&lt;/pre></description></item></channel></rss>
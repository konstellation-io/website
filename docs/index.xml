<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konstellation – Home</title><link>https://www.konstellation.io/docs/</link><description>Recent content in Home on Konstellation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://www.konstellation.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Core concepts</title><link>https://www.konstellation.io/docs/kre/getting_started/core_concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.konstellation.io/docs/kre/getting_started/core_concepts/</guid><description>
&lt;p>KAI Server has the following core concepts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#engine">Engine&lt;/a>&lt;/li>
&lt;li>&lt;a href="#projects-aka-runtimes">Projects&lt;/a>&lt;/li>
&lt;li>&lt;a href="#versions">Versions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#workflows">Workflows&lt;/a>&lt;/li>
&lt;li>&lt;a href="#nodes">Nodes&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="engine">Engine&lt;/h3>
&lt;p>The Engine component is the central component that works as the &lt;strong>operation tool&lt;/strong> to create, manage and monitor all the resources associated with each solution that you would put in production. It includes an admin web app, an API and some other components.&lt;/p>
&lt;p>Using the admin web app you will be able to manage users, permissions and runtimes.&lt;/p>
&lt;h3 id="runtimes">Runtimes&lt;/h3>
&lt;p>Inside KAI Server you create runtimes. A runtime is identified by an ID and a name, you can upload as many versions for it as you need.&lt;/p>
&lt;p>A project represents a single application, with different versions and all the tools and resources related to it, such as monitoring, audits, users, workflows, data, etc.&lt;/p>
&lt;h3 id="versions">Versions&lt;/h3>
&lt;p>A version is a collection of all things needed for your solution to work, like code for each node, models, assets&amp;hellip; This is a key concept in KAI Server because if you make changes at any level, model or code, you then have a new version that must be uploaded and deployed. This make versions immutable entities easier to track and debug over time. To upload your versions into a runtime you will need a KRT file.&lt;/p>
&lt;p>The initial state of a version is stopped. A stopped version doesn&amp;rsquo;t consume any resource in the cluster. When you start a version, all needed resources are created, but it is not accessible from the outside. You have to publish a version if you want to call it from the outside.&lt;/p>
&lt;h3 id="workflows">Workflows&lt;/h3>
&lt;p>A Workflow is a sequence of tasks that process an incoming message from the external world and return a response. Each task is designed as a node that takes an input message and generates an output. You can add as many nodes as you need to your workflow.&lt;/p>
&lt;p>A workflow is composed by an entrypoint and as many nodes as you need to fulfill the desired solution. The workflow defines how the nodes are interconnected and how the information will flow from one node to another.&lt;/p>
&lt;h3 id="nodes">Nodes&lt;/h3>
&lt;p>A node is an isolated process inside a workflow. They can be coded in &lt;code>Python&lt;/code> or in &lt;code>GoLang&lt;/code> and are designed to be scalable and asynchronous. Each node is deployed in a separated pod inside the cluster and they are connected to other nodes through an event broker.&lt;/p></description></item><item><title>Docs: KAI Server Architecture</title><link>https://www.konstellation.io/docs/kre/operator/kais_architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.konstellation.io/docs/kre/operator/kais_architecture/</guid><description>
&lt;p>KAI Server runs inside a kubernetes cluster in a single namespace. All components for the KAI Server are deployed in the same namespace (&lt;code>kre&lt;/code> by default).&lt;/p>
&lt;h2 id="components">Components&lt;/h2>
&lt;figure>
&lt;img src="https://www.konstellation.io/docs/static/kais_architecture.jpg" width="1000px"/>
&lt;/figure>
&lt;p>The schema above shows the architecture inside KAI Server. It is a scalable and asynchronous architecture designed to seamless deploy process automation projects into production.&lt;/p>
&lt;h3 id="admin-api">Admin API&lt;/h3>
&lt;p>The Admin API is the central component of KAI Server. It is responsible for orchestrating all other components and executing user actions in the cluster.&lt;/p>
&lt;h3 id="admin-ui">Admin UI&lt;/h3>
&lt;p>This is the component that renders all the UI, where the users can interact with the Runtimes.&lt;/p>
&lt;h3 id="k8-manager">K8 Manager&lt;/h3>
&lt;p>This service exposes a gRPC service to encapsulate all Kubernetes related features and Prometheus queries to get metrics and alerts. The only service that is going to call this gRPC is the Admin API service when it&amp;rsquo;s needed to create new Kubernetes resources.&lt;/p>
&lt;h3 id="mongodb">MongoDB&lt;/h3>
&lt;p>This is the database where the Admin API stores all the objects needed to manage the server. Users, runtimes, versions, workflows and so on.&lt;/p>
&lt;h3 id="nats">NATs&lt;/h3>
&lt;p>NATs is the event broker that serves as the backbone of communications inside the Server. Nodes in Workflows make use of NATs to communicate with each other.&lt;/p>
&lt;h4 id="influxdb">InfluxDB&lt;/h4>
&lt;p>KAI Server also stores metrics, for this it is used an InfluxDB instance. All nodes can write any kind of metric anytime desired. By giving a measurement name, tags, fields and data as usage of Influx requires.&lt;/p>
&lt;h4 id="chronograf">Chronograf&lt;/h4>
&lt;p>Chronograf will display stored metrics in any form desired. For this &lt;em>Flux&lt;/em> queries are used within a given display format. These will display cells inside dashboards giving metrics meaning and context, valuable for analytics and supervision of projects.&lt;/p></description></item><item><title>Docs: KRT YAML specs</title><link>https://www.konstellation.io/docs/kre/user/40_krt/specs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.konstellation.io/docs/kre/user/40_krt/specs/</guid><description>
&lt;p>A KRT yaml file is a declarative file describing the content of the KRT.
It has general description of the Version, a GRPC entrypoint for the Runtime Version and
nodes that are connected between each other to form workflows that will be access through GRPC services defined on the entrypoint.&lt;/p>
&lt;h2 id="fields-specs">Fields Specs&lt;/h2>
&lt;p>Here is a description of each field divided in five main concepts that make a KRT file:&lt;/p>
&lt;h3 id="metadata">Metadata&lt;/h3>
&lt;p>Descriptive information of the Runtime Version.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>version&lt;/strong>: the unique ID of this version.&lt;/li>
&lt;li>&lt;strong>description&lt;/strong>: brief text describing the content or functionality of this version.&lt;/li>
&lt;/ul>
&lt;h3 id="entrypoint">Entrypoint&lt;/h3>
&lt;p>This section describes how to access the Runtime Version.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>entrypoint&lt;/strong>:
&lt;ul>
&lt;li>&lt;strong>proto&lt;/strong>: protobuffer file describing messages and services contained in this Runtime Version.&lt;/li>
&lt;li>&lt;strong>image&lt;/strong>: base image and tag used to run the entrypoint service. It&amp;rsquo;s provided by Konstellation registry.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="configuration">Configuration&lt;/h3>
&lt;p>This section describes all variables and files that are environment related and would be configured
once the Runtime Version is uploaded to a KAI Server instance. This includes sensible data that should not
be included on the KRT file, for example passwords.&lt;/p>
&lt;p>All configuration defined here is mandatory, the Runtime Version won&amp;rsquo;t run if any of them is undefined.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config&lt;/strong>:
&lt;ul>
&lt;li>&lt;strong>variables&lt;/strong>: list of variable names that are going to be defined in KAI Server as environment variables.&lt;/li>
&lt;li>&lt;strong>files&lt;/strong>: list of file names.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="nodes">Nodes&lt;/h3>
&lt;p>This section includes a list of all existing components in the KRT file. Each component of a Runtime Version is a node.
To define each node in the krt file, you need to specify a name, a base image and its main source file.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>nodes&lt;/strong> (a list of):
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>: an identifier text, must be unique in the node list.&lt;/li>
&lt;li>&lt;strong>image&lt;/strong>: a base image provided by Konstellation used to run this node.&lt;/li>
&lt;li>&lt;strong>src&lt;/strong>: a path relative to the root of the KRT file pointing to the source file used to run this component.&lt;/li>
&lt;li>&lt;strong>gpu&lt;/strong>(optional): defaults to false, if true the node will use gpu, only available for Nvidia GPU.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="workflows">Workflows&lt;/h3>
&lt;p>This section includes the list of workflows contained in the KRT file. Each workflow connects one or more nodes between
each other and with a service defined in the entrypoint proto file.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>workflows&lt;/strong> (a list of):
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>: an identifier text, must be unique in the workflow list.&lt;/li>
&lt;li>&lt;strong>entrypoint&lt;/strong>: the name of a serviced defined in the proto buffer file of the entrypoint. See &lt;code>entrypoint.proto&lt;/code> above.&lt;/li>
&lt;li>&lt;strong>sequential&lt;/strong>: a list of node names that are connected sequentially as part of this workflow. All names should
exist on the node list defined above.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Run KAI Server</title><link>https://www.konstellation.io/docs/kre/getting_started/install_local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.konstellation.io/docs/kre/getting_started/install_local/</guid><description>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;p>In order to start development on this project you will need these tools:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>gettext&lt;/strong>: OS package to fill templates during deployment&lt;/li>
&lt;li>&lt;strong>minikube&lt;/strong>: the local version of Kubernetes to deploy KAI Server&lt;/li>
&lt;li>&lt;strong>helm&lt;/strong>: K8s package manager. Make sure you have v3+&lt;/li>
&lt;li>&lt;strong>yq&lt;/strong>: YAML processor. Make sure you have v4+&lt;/li>
&lt;li>&lt;strong>hostctl&lt;/strong>: Cli tool to manage entries in &lt;code>/etc/hosts&lt;/code> file&lt;/li>
&lt;/ul>
&lt;h2 id="local-environment">Local Environment&lt;/h2>
&lt;p>KAI Server has a tool called &lt;code>krectl&lt;/code> to handle common actions you will need during development.&lt;/p>
&lt;p>All the configuration needed to run KAI Server locally can be found in the &lt;code>.krectl.conf&lt;/code> file. Usually, you&amp;rsquo;ll be ok with the default values. Check Minikube&amp;rsquo;s parameters if you need to tweak the resources assigned to it.&lt;/p>
&lt;p>Run &lt;code>help&lt;/code> to get info for each command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$&amp;gt; krectl.sh &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>command&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> --help
// Outputs:
krectl.sh -- a tool to manage KAI Server environment during development.
syntax: krectl.sh &amp;lt;command&amp;gt; &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>options&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
commands:
dev creates a &lt;span style="color:#204a87">complete&lt;/span> &lt;span style="color:#204a87">local&lt;/span> environment and auto-login to frontend.
start starts minikube kre profile.
stop stops minikube kre profile.
login creates a login URL and open your browser automatically on the admin page.
build calls docker to build all images inside minikube.
deploy calls helm to create install/upgrade a kre release on minikube.
delete calls kubectl to remove runtimes or versions.
global options:
h prints this help.
v verbose mode.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="install-local-environment">Install local environment&lt;/h3>
&lt;p>To install KAI Server in your local environment:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$&amp;gt; ./krectl.sh dev &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--hard&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will install everything you need into the namespace specified in your development &lt;code>.krectl.conf&lt;/code> file.&lt;br>
The &lt;code>Hard&lt;/code> flag will force starting from 0 all installation processes.&lt;/p>
&lt;h3 id="login-to-local-environment">Login to local environment&lt;/h3>
&lt;p>First, remember to edit your &lt;code>/etc/hosts&lt;/code>, see &lt;code>./krectl.sh dev&lt;/code> output for more details.&lt;/p>
&lt;p>&lt;strong>NOTE&lt;/strong>: If you have the &lt;a href="https://github.com/guumaster/hostctl">hostctl&lt;/a> tool installed, updating &lt;code>/etc/hosts&lt;/code> will be done automatically too.&lt;/p>
&lt;p>Now you can access the admin UI visiting the login URL that will be opened automatically by executing the following script:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$&amp;gt; ./krectl.sh login &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--new&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will see an output like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">⏳ Calling Admin API...
Login &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>. Open your browser at:
🌎 http://admin.kre.local/signin/c7d024eb-ce35-4328-961a-7d2b79ee8988
✔️ Done.
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Install KAI Server</title><link>https://www.konstellation.io/docs/kre/operator/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.konstellation.io/docs/kre/operator/installation/</guid><description>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Kubernetes 1.19+&lt;/li>
&lt;li>Nginx ingress controller. See &lt;a href="#ingress-controller">Ingress Controller&lt;/a>.&lt;/li>
&lt;li>Helm 3+&lt;/li>
&lt;/ul>
&lt;h2 id="install-chart">Install chart&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$&amp;gt; helm repo add konstellation-io https://charts.konstellation.io
$&amp;gt; helm repo update
$&amp;gt; helm install &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>RELEASE_NAME&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> konstellation-io/kre
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>See &lt;a href="https://helm.sh/docs/helm/helm_repo/">helm repo&lt;/a> and &lt;a href="https://helm.sh/docs/helm/helm_install/">helm install&lt;/a> for command documentation.&lt;/em>&lt;/p>
&lt;h2 id="dependencies">Dependencies&lt;/h2>
&lt;p>By default, this chart installs &lt;a href="https://github.com/influxdata/helm-charts/tree/master/charts/influxdb">InfluxDB&lt;/a> and &lt;a href="https://github.com/influxdata/helm-charts/tree/master/charts/kapacitor">Kapacitor&lt;/a> chart as dependencies.&lt;/p>
&lt;p>However, &lt;strong>Kapacitor&lt;/strong> is an optional dependency. To disable it during installation, set &lt;code>kapacitor.enabled&lt;/code> to &lt;code>false&lt;/code>.&lt;/p>
&lt;h2 id="uninstall-chart">Uninstall chart&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$&amp;gt; helm uninstall &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>RELEASE_NAME&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This removes all the Kubernetes components associated with the chart and deletes the release.&lt;/p>
&lt;p>&lt;em>See &lt;a href="https://helm.sh/docs/helm/helm_uninstall/">helm uninstall&lt;/a> for command documentation.&lt;/em>&lt;/p>
&lt;h2 id="upgrading-chart">Upgrading Chart&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$&amp;gt; helm upgrade &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>RELEASE_NAME&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> konstellation.io/kre
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>See &lt;a href="https://helm.sh/docs/helm/helm_upgrade/">helm upgrade&lt;/a> for command documentation.&lt;/em>&lt;/p>
&lt;h2 id="ingress-controller">Ingress controller&lt;/h2>
&lt;p>This Chart has been developed using &lt;strong>Nginx Ingress Controller&lt;/strong>. So using the default ingress annotations ensures its correct operation.&lt;/p>
&lt;p>&lt;em>See &lt;a href="https://github.com/konstellation-io/kre/blob/main/helm/kre/values.yaml">values.yaml&lt;/a> file and &lt;a href="https://kubernetes.github.io/ingress-nginx/">Nginx Ingress controller&lt;/a> for additional documentation&lt;/em>*.&lt;/p>
&lt;p>However, users could use any other ingress controller (for example, &lt;a href="https://doc.traefik.io/traefik/providers/kubernetes-ingress/">Traefik&lt;/a>). In that case, ingress configurations equivalent to the default ones must be provided.&lt;/p>
&lt;p>Keep in mind that even using equivalent ingress configurations the correct operation of the appliance is not guaranteed.&lt;/p></description></item><item><title>Docs: Customization</title><link>https://www.konstellation.io/docs/kre/operator/customization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.konstellation.io/docs/kre/operator/customization/</guid><description>
&lt;h2 id="about-customization">About customization&lt;/h2>
&lt;p>Helm chart parameters are configured via a &lt;code>values.yaml&lt;/code> file or the &lt;code>--set&lt;/code> option.&lt;/p>
&lt;p>It is possible to configure a lot of aspects of a KAI Server deployment, as depending on your environment and your use case the default values could not be enough. If that is the case, one or more custom &lt;code>values.yaml&lt;/code> files in conjunction with the &lt;code>--set&lt;/code> option can be used with these parameters to be applied when running Helm.&lt;/p>
&lt;h2 id="chart-values">Chart Values&lt;/h2>
&lt;p>Check &lt;a href="https://github.com/konstellation-io/kre/blob/main/helm/kre/CHART.md">here&lt;/a> for a complete list of chart values.&lt;/p></description></item></channel></rss>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konstellation â€“ Documentation</title><link>https://konstellation-io.github.io/website/docs/</link><description>Recent content in Documentation on Konstellation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://konstellation-io.github.io/website/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Getting started</title><link>https://konstellation-io.github.io/website/docs/kre/getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/getting_started/</guid><description>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>The best way to start working with KRE, to test it and understand how it works, is to deploy it on your local machine and follow basic instructions to create an example project.&lt;/p>
&lt;p>Follow the instructions of install KRE on your &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/installation/local/">local environment&lt;/a>&lt;/p>
&lt;h2 id="logging-into-kre">Logging into KRE&lt;/h2>
&lt;p>As mention in the Install local environment section, to login to KRE just run the following script that you can find in the KRE repository.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./krectl.sh login
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-your-first-version">Create your first Version&lt;/h2>
&lt;p>You need to follow these steps in order to create a version and get it ready to be called from outside KRE.&lt;/p>
&lt;h3 id="1-create-runtime">1. Create Runtime&lt;/h3>
&lt;p>Once you are logged in as an administrator, you can create a new Runtime by simply following the &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_runtime/">create Runtime guide&lt;/a>.&lt;/p>
&lt;h3 id="2-download-a-sample-krt-file">2. Download a sample KRT file&lt;/h3>
&lt;p>Inside a Runtime you can upload one or more versions that can later be ran and publish. You can use a pre-generated &lt;a href="https://konstellation-io.github.io/website/website/krts/greeter-v1.krt">sample greeter krt&lt;/a>. You can find a more detailed explanation on how to create your own KRT file &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/">here&lt;/a>.&lt;/p>
&lt;h3 id="3-upload-the-krt-file">3. Upload the KRT file&lt;/h3>
&lt;p>Next thing you need is to upload the KRT that contains your Version. Within an existing Runtime detail page you can &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_version/">upload a new version&lt;/a>.&lt;/p>
&lt;h3 id="4-start-and-publish">4. Start and Publish&lt;/h3>
&lt;p>An uploaded Version is created in &amp;ldquo;STOPPED&amp;rdquo; state, in order to use it you need to first &amp;ldquo;START&amp;rdquo; it and &amp;ldquo;PUBLISH&amp;rdquo; it before been able to call it. You can learn more about it on the &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/tasks/version_management/#version-lifecycle">Version lifecycle guide&lt;/a>&lt;/p>
&lt;h3 id="5-make-a-call">5. Make a call&lt;/h3>
&lt;p>Now you have all set to consume your Version services. You can &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/tasks/consume_version_services/#call-from-cli">test it with a simple CLI&lt;/a>, or you can &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/tasks/consume_version_services/#call-from-grpc-client-on-golang">create a complete gRPC client&lt;/a> to call it.&lt;/p></description></item><item><title>Docs: Concepts</title><link>https://konstellation-io.github.io/website/docs/kre/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/concepts/</guid><description>
&lt;h2 id="what-is-kre">What is KRE?&lt;/h2>
&lt;p>It is an engine capable of deploy, manage and monitor a full AI solution in production in seconds using &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/">KRT files&lt;/a>.&lt;/p>
&lt;p>KRE has the following main concepts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#engine">Engine&lt;/a>&lt;/li>
&lt;li>&lt;a href="#runtimes">Runtimes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#versions">Versions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#workflows">Workflows&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="engine">Engine&lt;/h3>
&lt;p>Engine component is the central component that works as the &lt;strong>operation tool&lt;/strong> to create, manage and monitor all the resources associated with each solution that you would put in production. It includes an admin web app, an API and some other components.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/concepts/kre_overview_hu7a5b5d5cc96d9ada230aeb87ed5b9159_76309_1000x0_resize_q75_catmullrom.jpg" width="1000" height="347">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Engine components are deployed in a specific k8s namespace. The runtimes are deployed in other namespaces.
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Using the admin web app you will able to manage users, permissions and runtimes. You can see the &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/tasks/">tasks&lt;/a> if you want more information about what things you can do.&lt;/p>
&lt;h3 id="runtimes">Runtimes&lt;/h3>
&lt;p>Inside a KRE you can create as many runtimes as you need. A runtime is identified by a name and a description and it is where you can upload one or more solutions that we call versions. For example, you can deploy a KRE for the ClientX and create a runtime for each ClientX project. Inside each ClientX project you will upload the versions of your AI solution.&lt;/p>
&lt;p>Going into greater detail, a runtime is an environment that is &lt;strong>isolated&lt;/strong> from all other runtimes and other resources. Inside a runtime we will find the resources associated to your solution versions, a messaging system used to dispatch messages between components, databases to store metrics or generic data, a s3 store and internal components like an API to process incoming messages received from the KRE admin.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 710px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/concepts/runtime_overview_hu7a5b5d5cc96d9ada230aeb87ed5b9159_96017_700x0_resize_q75_catmullrom.jpg" width="700" height="522">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
All versions share databases, storage and message system but it is isolated from other runtimes.
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="versions">Versions&lt;/h3>
&lt;p>A version is a collection of all things needed for your AI solution to work like code, models, assets,&amp;hellip; This is a key concept in KRE because if you make changes at any level, model or code, you then have a new version that must be uploaded. This make versions immutable entities easier to track and debug over time. To upload your versions into a runtime you will need a KRT file. Learn more about how to create a KRT file &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/">here&lt;/a>.&lt;/p>
&lt;p>The initial state of a version is stopped. A stopped version doesn&amp;rsquo;t consume any resource in the cluster. When you start a version, all needed resources are created but it is not accessible from the outside. You have to publish a version if you want to call it from the outside.&lt;/p>
&lt;p>Usually, your AI solution must perform multiple actions, for example: to use a model to get a prediction or to receive information to calculate some metrics,&amp;hellip; so a version can define multiple workflows to accomplish that actions.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 810px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/concepts/version_overview_hu7a5b5d5cc96d9ada230aeb87ed5b9159_78448_800x0_resize_q75_catmullrom.jpg" width="800" height="392">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="workflows">Workflows&lt;/h3>
&lt;p>A Workflow is a sequence of tasks that processes an incoming message from the external world and returns a response. Each task is a node of a graph that takes an input message and generates an output. You can add as many nodes as you need to your workflow. The following image shows a basic workflow that makes a prediction using three nodes:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 910px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/concepts/basic_workflow_example_hu7a5b5d5cc96d9ada230aeb87ed5b9159_72389_900x0_resize_q75_catmullrom.jpg" width="900" height="261">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Example of a basic workflow
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>In KRE, external messages comes from a gRPC client. A special component called Entrypoint (gRPC server) dispatch the messages to an specific workflow and returns the response of the last node to the client. The workflow nodes becomes a PODs in your k8s cluster when the version is started.&lt;/p></description></item><item><title>Docs: Concepts</title><link>https://konstellation-io.github.io/website/docs/krt/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/concepts/</guid><description>
&lt;h2 id="what-is-krt">What is KRT?&lt;/h2>
&lt;p>It stands for &lt;strong>Konstellation Runtime Transport&lt;/strong>. Is the file format used in Konstellation as an easy way to move
between Development (KDL) to Production (KRE) environments.&lt;/p>
&lt;p>A KRT file is a &lt;strong>single and self-contained file&lt;/strong> with everything needed for a solution to be deployed on KRE. Is compressed
in &lt;code>.tar.gz&lt;/code> format and renamed to &lt;code>.krt&lt;/code> extension, it contains definition and all components of Runtime Version.&lt;/p>
&lt;p>A KRT file defines and pack a complete Runtime Version, including:&lt;/p>
&lt;ul>
&lt;li>a definition YAML file named &lt;code>krt.yml&lt;/code>.&lt;/li>
&lt;li>source code of all components.&lt;/li>
&lt;li>assets needed by each component.&lt;/li>
&lt;/ul>
&lt;h2 id="entities">Entities&lt;/h2>
&lt;p>These entities are used to in a KRT file to define how Version&amp;rsquo;s components interoperate:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#krt-yaml-file">KRT YAML file&lt;/a>&lt;/li>
&lt;li>&lt;a href="#entrypoint">Entrypoint&lt;/a>&lt;/li>
&lt;li>&lt;a href="#workflows">Workflows&lt;/a>&lt;/li>
&lt;li>&lt;a href="#nodes">Nodes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#runners">Runners&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="krt-yaml-file">KRT YAML file&lt;/h2>
&lt;p>It is a declarative file describing the content of the KRT. It has general description of the Runtime Version,
a gRPC entrypoint for the Version, a list of nodes that are connected between each other in different workflows.&lt;/p>
&lt;p>The yaml file connects all these entities together, Entrypoint, Workflow, Nodes and Runners in order to define a Version
and the way it works.&lt;/p>
&lt;p>Learn about the fields in the &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/specs/">KRT YAML specs&lt;/a> and see a working
&lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/define_krt_yml/">krt.yml example&lt;/a>&lt;/p>
&lt;h2 id="entrypoint">Entrypoint&lt;/h2>
&lt;p>A Version defines its communication with the outside world through its entrypoint. This is a gRPC server
defined in proto buffer format containing messages and services to interact with workflows inside the Version.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 910px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/krt/concepts/entrypoint_example_hu8701a1e7995c95d39a92b454faad3e38_63313_900x0_resize_q75_catmullrom.jpg" width="900" height="328">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Entrypoint example
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Each service defined in the proto file is connected to a workflow in the &lt;code>krt.yml&lt;/code> file definition.&lt;/p>
&lt;h2 id="workflows">Workflows&lt;/h2>
&lt;p>A Workflow is a sequence of tasks used to process incoming messages from the outside world and returns a response.
Each task is a node of a graph that takes an input message and generates an output for the next node. The last node&amp;rsquo;s
output is used as response to the incoming message.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 910px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/krt/concepts/basic_workflow_example_hu7a5b5d5cc96d9ada230aeb87ed5b9159_72389_900x0_resize_q75_catmullrom.jpg" width="900" height="261">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
Example of a basic workflow that makes a prediction using three nodes
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Each workflow can have one or more nodes, depending on how many steps are needed to process a given input message.&lt;/p>
&lt;p>A workflow is connected to the outside world through a service defined in KRT entrypoint. This entrypoint is a gRPC
server that handle incoming calls from third parties gRPC clients and deliver them as input messages to the first
node in the workflow and wait for the last node output to send a response to it corresponding gRPC client call.&lt;/p>
&lt;p>Once a Version is started, all nodes from all workflow are created as a POD in kubernetes.&lt;/p>
&lt;h2 id="nodes">Nodes&lt;/h2>
&lt;p>A Node is a task inside a workflow. It has two main parts, a runner image, and the source code files specific to perform
its task.&lt;/p>
&lt;p>Nodes have a single responsibility consisting on receive an input message, perform a task and return an output message.
This is achieved with handler functions defined in source code files specified in the KRT file.&lt;/p>
&lt;p>Once the node is running it will look for two handler functions, one at starting time for initialization, and a second
one to process incoming messages, these functions are called init handler and message handler respectively. Init handler
is optional and will be executed only once upon node starting to run. Message handler is mandatory and will
be executed each time the node receives a message.&lt;/p>
&lt;h2 id="runners">Runners&lt;/h2>
&lt;p>Runners are base docker images, provided by Konstellation team, that can be used for nodes to run code on different
programming languages. Each image includes language specific tools to integrate itself as part of a workflow.&lt;/p></description></item><item><title>Docs: Define a krt.yml file</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/define_krt_yml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/tasks/define_krt_yml/</guid><description>
&lt;p>This is the example &lt;code>krt.yml&lt;/code> file for the example project shown &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/">here&lt;/a>.&lt;/p>
&lt;p>Here you can see how the two parts of the projects are divided in two workflows. The first workflow, called &lt;code>prediction&lt;/code>,
has three nodes, the first input to a proper format (node &lt;code>etl&lt;/code>), performing a prediction (node &lt;code>execute-dl-model&lt;/code>), and
the last node convert the prediction to different format (node &lt;code>create-output&lt;/code>).&lt;/p>
&lt;p>The second workflow called &lt;code>save-client-metrics&lt;/code> that collects metrics to match predictions with real data for later
analysis. It only has one node called &lt;code>client-metrics&lt;/code>.&lt;/p>
&lt;p>This example Version has two environment variables called &lt;code>API_KEY&lt;/code> and &lt;code>API_SECRET&lt;/code> that would need to be setup once
the version is uploaded to KRE. Same as with the file variable called &lt;code>HTTPS_CERT&lt;/code>.&lt;/p>
&lt;p>Note that the Entrypoint &lt;code>public_input.proto&lt;/code> should have two services defined called &lt;code>MakePrediction&lt;/code> and
&lt;code>SaveClientMetric&lt;/code> to allow external call to be routed to each workflow correctly.&lt;/p>
&lt;p>Learn more about &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/create_an_entrypoint/">how to create an entrypoint&lt;/a>.&lt;/p>
&lt;h2 id="example-krtyml">Example krt.yml&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>example-project&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">description&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>This&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>is&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>an&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>example&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>of&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>a&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>ML&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>project.&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>public_input.proto&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-runtime-entrypoint&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">variables&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- API_KEY&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- API_SECRET&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">files&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- HTTPS_CERT&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">nodes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>etl&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-py&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>src/etl/execute_etl.py&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>execute-dl-model&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-py&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>src/execute_model/execute_model.py&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>create-output&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-py&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>src/output/output.py&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-go&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>bin/client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">workflows&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>prediction&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>MakePrediction&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sequential&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- etl&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- execute-dl-model&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- create-output&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>save-client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>SaveClientMetric&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sequential&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Local</title><link>https://konstellation-io.github.io/website/docs/kre/installation/local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/local/</guid><description>
&lt;h1 id="requirements">Requirements&lt;/h1>
&lt;p>The recomended way to test KRE is deploy it on top of Minikube with VirtualBox driver. Deploying this way you can check a full featured installation of KRE.&lt;/p>
&lt;p>Install all these required software by following the guides linked bellow.&lt;/p>
&lt;p>&lt;a href="https://docs.docker.com/engine/install/">Docker&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/es/docs/tasks/tools/install-kubectl/">kubectl&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">Minikube&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://helm.sh/docs/intro/install/">Helm&lt;/a>&lt;/p>
&lt;h2 id="installation-with-krectl-script">Installation with krectl script&lt;/h2>
&lt;p>To hide all the complexity of installing and setting a local cluster, we&amp;rsquo;ve created a script called &lt;code>krectl.sh&lt;/code> in the &lt;a href="https://github.com/konstellation-io/kre">project repository&lt;/a> that do all the needed steps.&lt;/p>
&lt;p>This script is a development tool used for several tasks. From an end user point of view, you can run this command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./krectl.sh dev --skip-build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>NOTE: the &lt;code>--skip-build&lt;/code> option means that the script won&amp;rsquo;t run a docker build for each component&amp;rsquo;s image. This is the default
behaviour but is only needed if you are going to develop any KRE component.&lt;/p>
&lt;p>After a couple of minutes you will have a running Minikube profile with a KRE installed and running. The script will also try an automatic login into the local admin section &lt;code>http://admin.kre.local&lt;/code> (see #validate-the-installation).&lt;/p>
&lt;h2 id="edit-your-hosts-file">Edit your hosts file&lt;/h2>
&lt;p>Get the cluster ip with the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">minikube -p kre-local ip
&lt;span style="color:#8f5902;font-style:italic"># Output example&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 192.168.99.100&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add this lines to &lt;code>/etc/hosts&lt;/code>&lt;/p>
&lt;pre>&lt;code>192.168.99.100 admin.kre.local
192.168.99.100 api.kre.local
&lt;/code>&lt;/pre>&lt;h2 id="validate-the-installation">Validate the installation&lt;/h2>
&lt;p>If every run correctly and you edited your hosts file, you should be able to login into KRE admin section. In a local environment there are no outgoing emails, but you can login with this command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./krectl.sh login
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Login</title><link>https://konstellation-io.github.io/website/docs/kre/tasks/login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/tasks/login/</guid><description>
&lt;p>KRE login is a passwordless process so you only need to provide your email:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/login/login_screen_hu6b4d4c4402f13ef6689bedcf64656ae8_12794_600x0_resize_catmullrom_2.png" width="600" height="368">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>After submitting your email address you will see the following screen:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/login/login_passwordless_hu5fb6fdf09b0ac3b587961740a3982e57_31821_600x0_resize_catmullrom_2.png" width="600" height="432">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>You will receive an email with a login link:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/login/login_link_hu71fe54fbd1d880b0ebaac09911343df0_21486_600x0_resize_catmullrom_2.png" width="600" height="183">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Clicking the login link you will navigate to the runtime list screen.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/login/user_viewer_huf43b978f320152200ba1f5efbcf7e93a_20229_1000x0_resize_catmullrom_2.png" width="1000" height="368">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>If you are a new user, your role will be &lt;code>viewer&lt;/code> so you should ask to the admin user for privileges for edition and creation (&lt;code>manager&lt;/code> role).
An &lt;code>admin&lt;/code> user can change the user role using the user administration interface (&lt;code>/settings/users&lt;/code>):&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/login/user_admin_hub9a3e132459504b3edb2f6bdc567690f_49810_1000x0_resize_catmullrom_2.png" width="1000" height="396">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="user-roles">User roles&lt;/h3>
&lt;p>There are three roles for users in KRE. The following table shows the available actions for each role/resource:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Role&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Metrics&lt;/th>
&lt;th>Runtimes&lt;/th>
&lt;th>Versions&lt;/th>
&lt;th>Audits&lt;/th>
&lt;th>Logs&lt;/th>
&lt;th>Settings&lt;/th>
&lt;th>Users&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>admin&lt;/td>
&lt;td>Full control&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>manager&lt;/td>
&lt;td>Can do anything but management of settings and users&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>viewer&lt;/td>
&lt;td>Only can see the metrics, created runtimes and its versions&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Create an Entrypoint</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/create_an_entrypoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/tasks/create_an_entrypoint/</guid><description>
&lt;p>To connect workflows with third party clients you need a gRPC server called Entrypoint in your KRT file.&lt;/p>
&lt;p>But you don&amp;rsquo;t need to implement any code, just define its messages and services.&lt;/p>
&lt;p>In the &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/">example project&lt;/a> there are defined two workflows that need to be exposed
through the entrypoint. So in the entrypoint proto file you need to create two services and messages as follows:&lt;/p>
&lt;h3 id="example-public_inputproto">Example public_input.proto&lt;/h3>
&lt;pre>&lt;code>syntax = &amp;quot;proto3&amp;quot;;
package entrypoint;
service Entrypoint {
rpc Prediction(PredictionRequest) returns (PredictionResponse) {};
rpc SaveMetrics(MetricsRequest) returns (MetricsResponse) {};
};
message PredictionRequest {
string name = 1;
... add more fields here ...
}
message PredictionResponse {
string prediction = 1;
... add more fields here ...
}
message MetricsRequest {
... add fields here ...
}
message MetricsResponse {
... add fields here ...
}
&lt;/code>&lt;/pre></description></item><item><title>Docs: Create runtime</title><link>https://konstellation-io.github.io/website/docs/kre/tasks/create_runtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/tasks/create_runtime/</guid><description>
&lt;p>If you have &lt;code>manager&lt;/code> role, you will see the &amp;ldquo;ADD RUNTIME&amp;rdquo; button in the runtimes screen:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_runtime/runtimes_screen_hue4fd0a54479c3496d3bc183a61aaaea8_20361_1000x0_resize_catmullrom_2.png" width="1000" height="490">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>We are going to create a new runtime called &lt;code>test&lt;/code>:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_runtime/add_runtime_hu92d41c6992718aa3a74d49f59445185b_15287_600x0_resize_catmullrom_2.png" width="600" height="501">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>After clicking the &lt;code>save&lt;/code> button, we will see the &lt;code>test&lt;/code> runtime in the runtimes screen with status &lt;code>creating&lt;/code>.
At this moment KRE is creating all necessary resources inside Kubernetes and it can take a time.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_runtime/runtime_creating_hue45359b6cad59e1ee9c276af8929a8d3_33548_1000x0_resize_catmullrom_2.png" width="1000" height="394">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>After a while, the runtime status should be &lt;code>started&lt;/code> or if there was a problem with the initialization the status should be &lt;code>error&lt;/code>.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 410px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_runtime/runtime_started_hu0e5f734b8fed8551e4eb33c3c0dffe27_19158_400x0_resize_catmullrom_2.png" width="400" height="330">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: GKE</title><link>https://konstellation-io.github.io/website/docs/kre/installation/cloud/gke/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/cloud/gke/</guid><description>
&lt;h1 id="gke-deployment">GKE deployment&lt;/h1>
&lt;p>The flavor of Kubernetes on Google is called GKE (Google Kubernetes Engine) which allow to deploy a cluster managed by Google. This means that Google will manage the lifecycle of the Master nodes of your cluster.&lt;/p>
&lt;p>When you create a GKE cluster by default is created an Instance Group, which is responsible to start the GCE (Google Compute Engine) instances and scale up and down depending on your configuration. In these instances of GCE is where the loads that we deploy on GKE will run. Therefore, is needed to adjust the type of instances on this instance group, to support the load of your deployment. For a PoC of KRE you can set up an Instance Group with min instances 1 up to 3 of type &lt;code>n1-standard-2&lt;/code> and everything will works fine. Be aware about the autoscaling configuration of the Instances Group, because if you only have one Instance Group added to your GKE cluster, at least is required one instance up in order to run some Kubernetes components that run as PODS.&lt;/p>
&lt;p>Deploy an GKE cluster is not the goal of this guide, only the detail some specific configuration needed to run KRE on top of it. It is recommend to use IaC (Infrastructure As Code) approach using Terraform to automate the creation of your cluster, &lt;a href="https://learn.hashicorp.com/tutorials/terraform/gke">here&lt;/a> you can find useful resources about that. Also, you can follow the instructions from the official &lt;a href="https://cloud.google.com/cloud-build/docs/deploying-builds/deploy-gke">Google site&lt;/a>.&lt;/p>
&lt;h1 id="storage">Storage&lt;/h1>
&lt;p>KRE uses a shared storage with &lt;code>ReadWriteMany&lt;/code> volumes, for this reason is necessary to have a NFS storage(aka Filestore on Google) and get &lt;code>filestore_ip&lt;/code> and &lt;code>File share name&lt;/code> values to use later on.&lt;/p>
&lt;h1 id="kubernetes-required-components">Kubernetes required components&lt;/h1>
&lt;p>KRE uses some additional components required for the tool, The basic configuration is documented below:&lt;/p>
&lt;h2 id="ingress-controller">Ingress controller&lt;/h2>
&lt;p>Ingress Controller is a component to create a load balancer on your cloud provider and links the load balancer with the ingress controller service, allowing publishing services outside your cluster.&lt;/p>
&lt;pre>&lt;code>helm upgrade --install \
--namespace kube-system \
--version 1.40.2 \
nginx-ingress \
stable/nginx-ingress
&lt;/code>&lt;/pre>&lt;h2 id="cert-manager">Cert manager&lt;/h2>
&lt;p>Cert Manager automatize the creation and maintenance of certificates, allowing the use of TLS in the ingress controller. &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/installation/customization/#cert-manager">+ Info&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create namespace cert-manager --dry-run -o yaml &lt;span style="color:#000;font-weight:bold">|&lt;/span> kubectl apply -f -
helm repo add jetstack https://charts.jetstack.io
helm repo update
helm upgrade --install &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --namespace cert-manager &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --version v0.15.0 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --set &lt;span style="color:#000">installCRDs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> cert-manager &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> jetstack/cert-manager
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="storage-provisioner">Storage provisioner&lt;/h2>
&lt;p>In order to connect your &lt;a href="#storage">Filestore&lt;/a> with the cluster storage needs install a nfs-provisioner.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm upgrade --install &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --namespace kube-system &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --set nfs.server&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;FILESTORE_IP_ADDRESS&amp;gt; &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --set nfs.path&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/&amp;lt;FILESTORE_FILE_SHARE_NAME&amp;gt; &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> nfs-provisioner &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> stable/nfs-client-provisioner
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Replace values &lt;code>FILESTORE_IP_ADDRESS&lt;/code> and &lt;code>FILESTORE_FILE_SHARE_NAME&lt;/code> with the &lt;code>Filestore&lt;/code> you created earlier or with a pre-existing one.&lt;/p>
&lt;h1 id="dns">DNS&lt;/h1>
&lt;h2 id="get-ingress-controller-hostname">Get Ingress Controller hostname&lt;/h2>
&lt;p>First of all you need to know the name of the ELB where we have to point your DNS entry. With the below command you will get name of this Load Balancer.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n kube-system get svc -l &lt;span style="color:#000">app&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>nginx-ingress,component&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>controller -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{.items[0].status.loadBalancer.ingress[0].ip}&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output of this command should show a &lt;code>load balancer IP address&lt;/code>.&lt;/p>
&lt;h2 id="create-wildcard-entry-in-your-dns-provider">Create wildcard entry in your DNS provider&lt;/h2>
&lt;p>Once obtained a &lt;code>load balancer IP address&lt;/code> add in your DNS provider a new A Record, with the following values:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Subdomain&lt;/th>
&lt;th>Load Balancer IP&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>*.kre.yourdomain.com&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;load balancer IP address&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>After a while the resolution of your domain should point to the load balancer. KRE require of the following subdomains.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Subdomain&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>admin.kre.yourdomain.com&lt;/code>&lt;/td>
&lt;td>Web admin console&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>api.kre.yourdomain.com&lt;/code>&lt;/td>
&lt;td>API&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>If you &lt;code>dns provider doesn't have wildcard entries&lt;/code> you can use an approach based on hosted zones.&lt;/p>
&lt;h2 id="validate">Validate&lt;/h2>
&lt;p>To validate that the DNS configuration is working fine you can use the tool &lt;code>dig&lt;/code> to query the DNS as follows.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dig admin.kre.yourdomain.com
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output should be something as below.&lt;/p>
&lt;pre>&lt;code>; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.16.1-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; admin.kre.yourdomain.com
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 901
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 65494
;; QUESTION SECTION:
;admin.kre.yourdomain.com. IN A
;; ANSWER SECTION:
admin.kre.yourdomain.com. 1799 IN A 1.2.3.4
;; Query time: 64 msec
;; SERVER: 127.0.0.53#53(127.0.0.53)
;; WHEN: miÃ© ago 12 16:18:49 CEST 2020
;; MSG SIZE rcvd: 75
&lt;/code>&lt;/pre>&lt;h1 id="helm-deployment">Helm deployment&lt;/h1>
&lt;h2 id="create-valuesyaml">Create values.yaml&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># If you are using a cloud smtp provider and this sender email is not verified, is possible that emails won&amp;#39;t be sent and you can&amp;#39;t login.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sender&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_SMTP_EMAIL_ACCOUNT&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">senderName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SENDER_NAME&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SMTP_USER&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SMTP_PASSWORD&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SMTP_HOST&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SMTP_PORT&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">baseDomainName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">admin&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiBaseURL&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>api.kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">frontendBaseURL&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>https&lt;span style="color:#000;font-weight:bold">:&lt;/span>//admin.kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># IMPORTANT: userEmail is used as the system admin user. Use this for first login and create new users.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">userEmail&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;ADMIN_EMAIL_ADDRESS&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">runtime&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sharedStorageClass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>nfs-client&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sharedStorageSize&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>10Gi&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">nats_streaming&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">size&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>2Gi&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mongodb&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">persistentVolume&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">size&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>5Gi&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">chronograf&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">persistentVolume&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">size&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>1Gi&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">influxdb&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">persistentVolume&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">size&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>5Gi&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">auth&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">verificationCodeDurationInMinutes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">jwtSignSecret&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>int_jwt_secret&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">secureCookie&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cookieDomain&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">adminApi&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tls&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>api.kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>nfs-client&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">adminUI&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tls&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>admin.kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mongodb&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mongodbDatabase&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;KRE&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">rootCredentials&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">username&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;admin&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">password&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;MONGODB_PASS&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">repository&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>mongo&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tag&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4.2.8&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">persistence&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mountPath&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>/data/db&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">size&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>6Gi&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">certManager&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">acme&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>https&lt;span style="color:#000;font-weight:bold">:&lt;/span>//acme-v02.api.letsencrypt.org/directory&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">email&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_EMAIL_ADDRESS&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="install-helm-chart">Install Helm chart&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create namespace kre
helm repo add konstellation-io https://charts.konstellation.io
helm repo update
helm upgrade --install kre --namespace kre --values values.yaml konstellation-io/kre
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="validate-the-installation">Validate the installation&lt;/h2>
&lt;p>To check if everything is working fine follow the &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/installation/validate/">Validate&lt;/a> section.&lt;/p>
&lt;h1 id="gpu-support-optional">GPU support (optional)&lt;/h1>
&lt;p>Create a gpu node pool with the following &lt;a href="https://cloud.google.com/kubernetes-engine/docs/how-to/gpus">the official GKE guide&lt;/a>. When you get to section &lt;a href="https://cloud.google.com/kubernetes-engine/docs/how-to/gpus#installing_drivers">Installing NVIDIA GPU device drivers&lt;/a>, instead of applying the yaml directly, &lt;strong>download it&lt;/strong> and add the following lines on daemonset env container section for nvidia-driver-installer:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff"> env:
&lt;span style="color:#00a000">+ - name: NVIDIA_DRIVER_VERSION
&lt;/span>&lt;span style="color:#00a000">+ value: &amp;#34;440.33.01&amp;#34;
&lt;/span>&lt;span style="color:#00a000">&lt;/span> - name: NVIDIA_INSTALL_DIR_HOST
value: /home/kubernetes/bin/nvidia
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then apply it with &lt;code>kubectl -f daemonset-preloaded.yaml&lt;/code>, continue with the rest of the guide, noting that &lt;strong>this driver supports CUDA 10.2&lt;/strong>, matching with the cuda version supported by KRE python image.&lt;/p></description></item><item><title>Docs: Helm basics</title><link>https://konstellation-io.github.io/website/docs/kre/installation/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/helm/</guid><description>
&lt;p>KRE can be installed on top of a Kubernetes cluster using the &lt;a href="https://helm.sh/">Helm&lt;/a> package manager.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Helm v3 or later&lt;/li>
&lt;li>Kubernetes v1.15+&lt;/li>
&lt;/ul>
&lt;h2 id="install-the-chart">Install the chart&lt;/h2>
&lt;ol>
&lt;li>Add the Konstellation Helm repository:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm repo add konstellation-io https://charts.konstellation.io
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Optionally, create a namespace to deploy all KRE components or skip this step using a created one:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create namespace kre
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Run the following command, providing a name for your KRE release (in this case &lt;code>kre&lt;/code>) and specifying the namespace:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm upgrade --install kre --namespace kre konstellation-io/kre
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uninstall-the-chart">Uninstall the chart&lt;/h2>
&lt;p>To uninstall the &lt;code>kre&lt;/code> deployment, use the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm uninstall kre --namespace kre
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command removes all the Kubernetes components associated with the chart and deletes the release. It only removes main KRE components, you may need to remove other resources created by KRE.&lt;/p></description></item><item><title>Docs: KRT YAML specs</title><link>https://konstellation-io.github.io/website/docs/krt/specs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/specs/</guid><description>
&lt;p>A KRT yaml file is a declarative file describing the content of the KRT. It has general description of the Version, a
GRPC entrypoint for the Runtime Version, nodes that are
connected between each other to form workflows that will be access through GRPC services defined on the entrypoint.&lt;/p>
&lt;p>You can see an &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/define_krt_yml/#example-file">example &lt;code>krt.yml&lt;/code> file&lt;/a>&lt;/p>
&lt;h2 id="fields-specs">Fields Specs&lt;/h2>
&lt;p>Here is a description of each field divided in five main concepts that make a KRT file:&lt;/p>
&lt;h3 id="metadata">Metadata&lt;/h3>
&lt;p>Descriptive information of the Runtime Version.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>version&lt;/strong>: the unique ID of this version.&lt;/li>
&lt;li>&lt;strong>description&lt;/strong>: brief text describing the content or functionality of this version.&lt;/li>
&lt;/ul>
&lt;h3 id="entrypoint">Entrypoint&lt;/h3>
&lt;p>This section describes how to access the Runtime Version.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>entrypoint&lt;/strong>:
&lt;ul>
&lt;li>&lt;strong>proto&lt;/strong>: protobuffer file describing messages and services contained in this Runtime Version.&lt;/li>
&lt;li>&lt;strong>image&lt;/strong>: base image adn tag used to run the entrypoint service. It&amp;rsquo;s provided by Konstellation registry.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="configuration">Configuration&lt;/h3>
&lt;p>This section describes all variables and files that are environment related and would be configured once the Runtime Version
is uploaded to a KRE instance. This includes sensible data that should not be included on the KRT file, for example passwords.&lt;/p>
&lt;p>All configuration defined here is mandatory, the Runtime Version won&amp;rsquo;t run if any of them is undefined.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config&lt;/strong>:
&lt;ul>
&lt;li>&lt;strong>variables&lt;/strong>: list of variable names that needs to be defined in KRE.&lt;/li>
&lt;li>&lt;strong>files&lt;/strong>: list of file names that needs to be filled in KRE.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="nodes">Nodes&lt;/h3>
&lt;p>This section includes a list of all existing components in the KRT file. Each component of a Runtime Version is a node.
To define each node in the krt file, you need to specify a name, a base image and its main source file.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>nodes&lt;/strong> (a list of):
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>: an identifier text, must be unique in the node list.&lt;/li>
&lt;li>&lt;strong>image&lt;/strong>: a base image provided by Konstellation used to run this node. It&amp;rsquo;s provided by Konstellation registry.&lt;/li>
&lt;li>&lt;strong>src&lt;/strong>: a path relative to the root of the KRT file pointing to the source file used to run this component.&lt;/li>
&lt;li>&lt;strong>gpu&lt;/strong>(optional): defaults to false, if true the node will use gpu, only available for Nvidia GPU.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="workflows">Workflows&lt;/h3>
&lt;p>This section includes the list of workflows contained in the KRT file. Each workflow connects one or more nodes between
each other and with a service defined in the entrypoint proto file.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>workflows&lt;/strong> (a list of):
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>: an identifier text, must be unique in the workflow list.&lt;/li>
&lt;li>&lt;strong>entrypoint&lt;/strong>: the name of a serviced defined in the proto buffer file of the entrypoint. See &lt;code>entrypoint.proto&lt;/code> above.&lt;/li>
&lt;li>&lt;strong>sequential&lt;/strong>: a list of node names that are connected sequentially as part of this workflow. All names should
exist on the node list defined above.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Create version</title><link>https://konstellation-io.github.io/website/docs/kre/tasks/create_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/tasks/create_version/</guid><description>
&lt;p>When all runtime resources are ready, you can click the created runtime in order to see the list of versions:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_version/versions_screen_hu0d45c690b63171258cd8b378095e3e48_40429_1000x0_resize_catmullrom_2.png" width="1000" height="382">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>We are going to upload a version of the &lt;a href="https://github.com/konstellation-io/kre/tree/master/krt-template/greeter">greeting example&lt;/a>. You can download the krt file &lt;a href="https://konstellation-io.github.io/website/website/krts/greeter-v1.krt">here&lt;/a>.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_version/add_version_hua3bbf1bfa17fdaedecdab412e92334e6_14685_600x0_resize_catmullrom_2.png" width="600" height="354">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>After creating the greeting version, you will see the version status screen:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_version/greeting_version_screen_huf340600169102cc7f0f117e79759b2e8_63501_1000x0_resize_catmullrom_2.png" width="1000" height="658">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>As you can see, the &lt;a href="https://github.com/konstellation-io/kre/tree/master/krt-template/greeter">greeting example&lt;/a> has two workflows called &lt;code>greeting&lt;/code> and &lt;code>saluting&lt;/code>. Both workflows have only one process called &lt;code>greeter&lt;/code>. The version status at this moment is &lt;code>stopped&lt;/code> so the &lt;code>greeter&lt;/code> processes color are grey. A workflow is a sequence of connected nodes, the first and the last node are called &lt;code>entrypoint&lt;/code>.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/create_version/greeting_version_screen_explained_hu618855afb64b2a97c4762ec269c4726e_194378_1000x0_resize_catmullrom_2.png" width="1000" height="657">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: EKS</title><link>https://konstellation-io.github.io/website/docs/kre/installation/cloud/eks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/cloud/eks/</guid><description>
&lt;h1 id="eks-deployment">EKS deployment&lt;/h1>
&lt;p>The flavor of Kubernetes on AWS is called EKS (Elastic Kubernetes Service) which allow to deploy a cluster managed by Amazon. This means that Amazon will manage the lifecycle of the Master nodes of your cluster.&lt;/p>
&lt;p>Currently, there are two ways of run loads on top of EKS, using EC2 instances as compute nodes that are added to the cluster or using the Fargate mode, where AWS also manage these compute nodes. In this guide is just described the first one, adding your own compute nodes with &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html">EC2 instances&lt;/a>.&lt;/p>
&lt;p>Deploy an EKS cluster is not the goal of this guide, only the detail some specific configuration needed to run KRE on top of it. It is recommend to use IaC (Infrastructure As Code) approach using Terraform to automate the creation of your cluster, &lt;a href="https://learn.hashicorp.com/tutorials/terraform/eks">here&lt;/a> you can find useful resources about that. Also you can follow the instructions from the official &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html">AWS site&lt;/a>.&lt;/p>
&lt;p>The final EKS deployment should be something like the below diagram.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/installation/cloud/eks/eks_diagram_hu810904b9cb0bf96ab0f9422ba192b8fc_30553_600x0_resize_catmullrom_2.png" width="600" height="512">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>After deploy your EKS cluster you are going to need the &lt;code>kubeconfig&lt;/code> file. This file is the way to configure the &lt;code>kubectl&lt;/code> and &lt;code>helm&lt;/code> CLIs to access to your cluster. In the case of EKS used to be required an extra plugin called &lt;a href="https://github.com/kubernetes-sigs/aws-iam-authenticator">AWS IAM authenticator&lt;/a> to authenticate via the IAM account. Please follow the steps detailed in hte &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html">AWS site&lt;/a>.&lt;/p>
&lt;h1 id="storage">Storage&lt;/h1>
&lt;p>An important amount of features of KRE are based on the use of shared storage with &lt;code>ReadWriteMany&lt;/code> volumes. Therefore, is required to add a storageClass to Kubernetes that support this kind of volumes.&lt;/p>
&lt;p>In AWS there are a service called EFS (Elastic File System) that bring to us a network shared storage. As mention before, the recommended way to create resources is using the approach of IaC, for EFS you can find examples of Terraform code &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/efs_mount_target">here&lt;/a>, or follow the manual steps from the &lt;a href="https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html">AWS site&lt;/a>.&lt;/p>
&lt;p>The common way to use this from Kubernetes is deploying what is called &lt;code>efs-provisioner&lt;/code> that create the interface between Kubernetes &lt;code>PersistentVolumeClaim&lt;/code> and EFS.&lt;/p>
&lt;p>In our experience we have had some issues with the &lt;code>efs-provisioner&lt;/code>, therefore instead of deploy an &lt;code>efs-provisioner&lt;/code> to support the creation of volumes on EFS we prefer to add a script to the &lt;code>UserData&lt;/code> of each EC2 instance to mount the shared EFS on a local mount point, for example on &lt;code>/mnt/efs/kre&lt;/code>, and create a &lt;code>HostPath&lt;/code> storageClass that will create all the volumes within this path. This way we can create &lt;code>ReadWriteMany&lt;/code> volumes that are accessible from all the nodes of your cluster. The &lt;code>UserData&lt;/code> script example is below, and is good practice setting it in the &lt;code>Launch Configuration&lt;/code> that manage the EC2 instance which are compute nodes of your cluster.&lt;/p>
&lt;p>Replace the following values on the script:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Param&lt;/th>
&lt;th>Example&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>API_SERVER_ENDPOINT&lt;/td>
&lt;td>&lt;a href="https://ABCD1234.gr7.us-east-1.eks.amazonaws.com">https://ABCD1234.gr7.us-east-1.eks.amazonaws.com&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CLUSTER_CERTIFICATE_AUTHORITY&lt;/td>
&lt;td>LS0tLS1CRUdJTiBDRVJUSUZJQ0F&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CLUSTER_NAME&lt;/td>
&lt;td>kre&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>EFS_ENDPOINT&lt;/td>
&lt;td>fs-123XYZ.efs.us-east-1.amazonaws.com&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87">set&lt;/span> -o xtrace
/etc/eks/bootstrap.sh --apiserver-endpoint &lt;span style="color:#4e9a06">&amp;#39;&amp;lt;API_SERVER_ENDPOINT&amp;gt;&amp;#39;&lt;/span> --b64-cluster-ca &lt;span style="color:#4e9a06">&amp;#39;&amp;lt;CLUSTER_CERTIFICATE_AUTHORITY&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;lt;CLUSTER_NAME&amp;gt;&amp;#39;&lt;/span>
mkdir -p /mnt/efs/kre
yum install amazon-efs-utils -y
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;EFS_ENDPOINT&amp;gt;:/ /mnt/efs/kre efs tls,_netdev&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/fstab
mount -a -t efs defaults
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the next section is described how to install the &lt;code>hostPath&lt;/code> provisioner.&lt;/p>
&lt;p>Network shared storage can be a bottleneck of performance, so depends on your usecase you should use only for the pieces that require
&lt;code>ReadWriteMany&lt;/code> volume, for the rest of the components you can use the default storageClass that will create an EBS resource on AWS. In the &lt;a href="#helm-deployment">Helm deployment&lt;/a> section is detailed the best option for your usecase and which pieces can use which storageClass.&lt;/p>
&lt;h1 id="kubernetes-required-components">Kubernetes required components&lt;/h1>
&lt;p>Some additional components are required on Kubernetes to get a full featured KRE deployment running. We are going to describe how to install those.&lt;/p>
&lt;h2 id="ingress-controller">Ingress controller&lt;/h2>
&lt;p>The use of Ingress Controller in Kubernetes that are deployed on cloud providers is very common, due to the reduction of costs on
load balancers, also the ingress objects help with the automation of some task when publish service to outside of your cluster, and many more.&lt;/p>
&lt;p>There are multiple choices of Ingress Controller (NGINX, Traefik, HAProxy, Kong, &amp;hellip;), you can find a full list of those
in the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/">Kubernetes site&lt;/a>, and all of them have pros and cons, in this guide we are going to explain how to deploy NGINX Ingress Controller. At this time KRE only support NGINX Ingress Controller than NGINX, but this is maintained by the CNCF, and the maturity of NGINX itself is quite important.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm upgrade --install &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --namespace kube-system &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --version 1.40.2 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> nginx-ingress &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> stable/nginx-ingress
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cert-manager">Cert manager&lt;/h2>
&lt;p>The access to the web admin interface of KRE and all the endpoints that are exposed to the end users required of a minimum level of security,
this is the reason why add a piece to automate the management of the lifecycle of all required certificates.&lt;/p>
&lt;p>Cert Manager allow creating certificates just with some configuration on the deployment process, and manage the lifecycle of those, updating those when expired without any human interaction. Moreover, with
the use of &lt;code>DNS01&lt;/code> challenge method can be created certificates for environment that are not exposed to Internet behind a firewall in a private network.&lt;/p>
&lt;p>In order to install Cert Manager we are going to use the official Helm chart. Below are the commands to deploy it within the Kubernetes namespace &lt;code>cert-manager&lt;/code>, be aware this is just a convention, you can deploy it in the namespace where you feel more comfortable.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create namespace cert-manager --dry-run -o yaml &lt;span style="color:#000;font-weight:bold">|&lt;/span> kubectl apply -f -
helm repo add jetstack https://charts.jetstack.io
helm repo update
helm upgrade --install &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --namespace cert-manager &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --version v0.15.0 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --set &lt;span style="color:#000">installCRDs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> cert-manager &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> jetstack/cert-manager
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>NOTE&lt;/strong>:&lt;/p>
&lt;p>Cert Mananager has &lt;a href="https://letsencrypt.org/docs/rate-limits/">rate limits&lt;/a> in place, be sure not to pass it or use staging environment.&lt;/p>
&lt;h2 id="storage-provisioner">Storage provisioner&lt;/h2>
&lt;p>In order to create the &lt;code>hostPath&lt;/code> provisioner just install the Helm chart as shown below.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm repo add rimusz https://charts.rimusz.net
helm repo update
helm upgrade --install hostpath-provisioner --namespace kube-system rimusz/hostpath-provisioner
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="dns">DNS&lt;/h1>
&lt;p>All the access to KRE services require of a hostname due to the use of Ingress objects and certificates. In order to get a
deployment and management processes easier we recommend delegating a subdomain &lt;code>kre&lt;/code> of a domain owned by you to a &lt;code>Route53&lt;/code> DNS hosted zone, and create a wildcard entry pointing to the Load Balancer of the Ingress Controller.&lt;/p>
&lt;h2 id="get-ingress-controller-hostname">Get Ingress Controller hostname&lt;/h2>
&lt;p>First of all you need to konw the name of the ELB where we have to point your DNS entry. With the below command you will get name of this Load Balancer.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n kube-system get svc -l &lt;span style="color:#000">app&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>nginx-ingress,component&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>controller -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{.items[0].status.loadBalancer.ingress[0].hostname}&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output of this command should be something like &lt;code>xxxxxxxxxxxxxxxxxxxxx-00000000.us-east-1.elb.amazonaws.com&lt;/code>.&lt;/p>
&lt;h2 id="create-wildcard-entry-in-your-hosted-zone">Create wildcard entry in your hosted zone&lt;/h2>
&lt;p>With the name of the ELB go to your hosted zone in Route53 and create a new A entry of type Alias pointing to the ELB name. That&amp;rsquo;s it.&lt;/p>
&lt;p>Depending on your environment you can use the &lt;code>DNS01&lt;/code> challenge to validate that you are the owner of the DNS name, in that case with Cert Manager there are a plugin that allow to perform this validation with a Route53, so this is another interesting point to take in account. In the next section is detailed how to automate this in the KRE deployment.&lt;/p>
&lt;p>After a while the resolution of your domain should point to the ELB. KRE require of the following subdomains.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Subdomain&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>admin.kre.yourdomain.com&lt;/code>&lt;/td>
&lt;td>Web admin console&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>api.kre.yourdomain.com&lt;/code>&lt;/td>
&lt;td>API&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="validate">Validate&lt;/h2>
&lt;p>To validate that the DNS configuration is working fine you can use the tool &lt;code>dig&lt;/code> to query the DNS as follow.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dig admin.kre.yourdomain.com
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output should be something as below.&lt;/p>
&lt;pre>&lt;code>; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.16.1-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; admin.kre.yourdomain.com
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 901
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 65494
;; QUESTION SECTION:
;admin.kre.yourdomain.com. IN A
;; ANSWER SECTION:
admin.kre.yourdomain.com. 1799 IN A 1.2.3.4
;; Query time: 64 msec
;; SERVER: 127.0.0.53#53(127.0.0.53)
;; WHEN: miÃ© ago 12 16:18:49 CEST 2020
;; MSG SIZE rcvd: 75
&lt;/code>&lt;/pre>&lt;h1 id="helm-deployment">Helm deployment&lt;/h1>
&lt;p>Once you have your EKS cluster ready with all the required extra components installed and all the credentials to access to your cluster is time to start the KRE deployment. The first step is to define a &lt;code>values.yaml&lt;/code> file that fit all the requirements for your installation. So we are going to describe an example of this file to deploy KRE in your cluster. After that we can apply the Helm chart with this value to deploy KRE and afterward we are going to describe how to validate the installation.&lt;/p>
&lt;h2 id="create-valuesyaml">Create values.yaml&lt;/h2>
&lt;p>Here is an example of a &lt;code>values.yaml&lt;/code> to deploy in your clustes, just fill the parameters that required of your own information of credentials or domains, and save the file as &lt;code>values.yaml&lt;/code> in order to apply it as is explained in the next section.&lt;/p>
&lt;p>All the parameters are ditailed in the section &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/installation/customization/">Customization&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">smtp&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sender&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_SMTP_EMAIL_ACCOUNT&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">senderName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SENDER_NAME&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SMTP_USER&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SMTP_PASSWORD&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SMTP_HOST&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;SMTP_PORT&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">baseDomainName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">admin&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">apiHost&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>api.kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">frontendBaseURL&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>https&lt;span style="color:#000;font-weight:bold">:&lt;/span>//admin.kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># IMPORTANT: userEmail is used as the system admin user. &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Use this for first login and create new users.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">userEmail&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;ADMIN_EMAIL_ADDRESS&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">runtime&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sharedStorageClass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>hostpath&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Uncomment this if you use a big dataset&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sharedStorageSize&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>10Gi&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">nats_streaming&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">className&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>gp2&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Uncomment this if your solution will receive a very large number of requests&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># size: 2Gi&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mongodb&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">persistentVolume&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storageClass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>gp2&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Uncomment this if you need more space for mongoDB&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># size: 5Gi &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">chronograf&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">persistentVolume&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storageClass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>gp2&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">influxdb&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">persistentVolume&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storageClass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>gp2&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># Uncomment this if you need more space for metrics and measurements on InfluxDB&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># size: 10Gi &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">auth&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">jwtSignSecret&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_SECRET_VALUE&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">secureCookie&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">cookieDomain&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">adminApi&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tls&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>api.kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>hostpath&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">adminUI&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">tls&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">host&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>admin.kre.&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_DOMAIN&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">mongodb&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mongodbDatabase&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;KRE&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mongodbUsername&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;MONGODB_USERNAME&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">mongodbPassword&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;MONGODB_PASS&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">rootCredentials&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">username&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;MONGODB_ROOT_USERNAME&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">password&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;MONGODB_ROOT_PASS&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">storage&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">className&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>gp2&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">certManager&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">enabled&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">acme&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># By default KRE use production letsencrypt url, &lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># if you need a staging environment, uncomment this.&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># server: https://acme-staging-v02.api.letsencrypt.org/directory&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">email&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;YOUR_EMAIL_ADDRESS&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="route53-config">Route53 config&lt;/h3>
&lt;p>If you use Route53 or the cluster is behind a VPN, the http01 default cert-manager config is not valid and you must use this one.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">certManager&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">dns01&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">route53&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">region&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;AWS_REGION&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">hostedZoneID&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;AWS_ROUTE53_HOSTEDZONE_ID&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">accessKeyID&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;AWS_ACCESS_KEY_ID&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">secretAccessKey&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;AWS_ACCESS_SECRET&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="install-helm-chart">Install Helm chart&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create namespace kre
helm repo add konstellation-io https://charts.konstellation.io
helm repo update
helm upgrade --install kre --namespace kre --values values.yaml konstellation-io/kre
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="validate-the-installation">Validate the installation&lt;/h2>
&lt;p>To check if everything is working fine follow the &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/installation/validate/">Validate&lt;/a> section.&lt;/p></description></item><item><title>Docs: Validate</title><link>https://konstellation-io.github.io/website/docs/kre/installation/validate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/validate/</guid><description>
&lt;h2 id="check-pods-on-kre-namespace">Check pods on KRE namespace&lt;/h2>
&lt;p>Command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n kre get pods
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Expected output:&lt;/p>
&lt;pre>&lt;code>NAME READY STATUS RESTARTS AGE
alertmanager-kre-local-prometheus-opera-alertmanager-0 2/2 Running 0 28h
kre-local-admin-api-75d8bdc6b9-n4qcv 1/1 Running 5 27h
kre-local-admin-ui-5d96987f95-9g59q 1/1 Running 0 27h
kre-local-grafana-67f89f8977-pqdmw 2/2 Running 0 28h
kre-local-k8s-manager-bddc586c4-kjhgf 1/1 Running 0 27h
kre-local-kube-state-metrics-78fbbcbfb8-64ds8 1/1 Running 0 28h
kre-local-prometheus-node-exporter-sx9sb 1/1 Running 0 28h
kre-local-prometheus-opera-operator-5b6f794b67-8lrdj 2/2 Running 0 28h
kre-mongo-0 1/1 Running 0 28h
prometheus-kre-local-prometheus-opera-prometheus-0 3/3 Running 1 28h
&lt;/code>&lt;/pre>&lt;h2 id="open-admin-web-console">Open Admin web console&lt;/h2>
&lt;p>If everything works fine you can go to &lt;a href="https://admin.kre.yourdomain.com">https://admin.kre.yourdomain.com&lt;/a> and see the admin UI as shown in the image bellow.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/installation/validate/admin_web_hu51f4e7b3b1b2ceed12d523513c1d3459_36023_600x0_resize_q75_catmullrom.jpeg" width="600" height="463">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="check-api-is-up">Check API is up&lt;/h2>
&lt;p>Command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -v https://api.kre.yourdomain.com
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Expected output:&lt;/p>
&lt;pre>&lt;code>* Trying 1.2.3.4:443...
* TCP_NODELAY set
* Connected to api.kre.yourdomain.com (1.2.3.4) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
* CAfile: /etc/ssl/certs/ca-certificates.crt
CApath: /etc/ssl/certs
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
* TLSv1.2 (IN), TLS handshake, Certificate (11):
* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
* TLSv1.2 (IN), TLS handshake, Server finished (14):
* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):
* TLSv1.2 (OUT), TLS handshake, Finished (20):
* TLSv1.2 (IN), TLS handshake, Finished (20):
* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256
* ALPN, server accepted to use h2
* Server certificate:
* subject: CN=api.kre.yourdomain.com
* start date: Aug 5 14:18:15 2020 GMT
* expire date: Nov 3 14:18:15 2020 GMT
* subjectAltName: host &amp;quot;api.kre.yourdomain.com&amp;quot; matched cert's &amp;quot;api.kre.yourdomain.com&amp;quot;
* issuer: C=US; O=Let's Encrypt; CN=Let's Encrypt Authority X3
* SSL certificate verify ok.
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
* Using Stream ID: 1 (easy handle 0x555789f5ddb0)
&amp;gt; GET / HTTP/2
&amp;gt; Host: api.kre.yourdomain.com
&amp;gt; user-agent: curl/7.68.0
&amp;gt; accept: */*
&amp;gt;
* Connection state changed (MAX_CONCURRENT_STREAMS == 128)!
&amp;lt; HTTP/2 404
&amp;lt; server: nginx/1.17.10
&amp;lt; date: Thu, 13 Aug 2020 08:53:16 GMT
&amp;lt; content-type: application/json; charset=UTF-8
&amp;lt; content-length: 24
&amp;lt; access-control-allow-credentials: true
&amp;lt; access-control-allow-origin:
&amp;lt; vary: Origin
&amp;lt; x-request-id: 74e620a75d284453082aabe95ca13958
&amp;lt; strict-transport-security: max-age=15724800; includeSubDomains
&amp;lt;
{&amp;quot;message&amp;quot;:&amp;quot;Not Found&amp;quot;}
* Connection #0 to host api.kre.yourdomain.com left intact
&lt;/code>&lt;/pre>&lt;p>With this command we are validating that the API is up and running properly, because the expected answer is &lt;code>{&amp;quot;message&amp;quot;:&amp;quot;Not Found&amp;quot;}&lt;/code>. Also, we can see that the certificate is issued correctly by Cert Manager.&lt;/p>
&lt;h2 id="check-the-api-logs">Check the API logs&lt;/h2>
&lt;p>Command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n kre logs kre-local-admin-api-75d8bdc6b9-n4qcv
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Expected output:&lt;/p>
&lt;pre>&lt;code>2020-08-11T12:35:25.356756843Z INFO MongoDB connecting...
2020-08-11T12:35:25.356831185Z INFO MongoDB ping...
2020-08-11T12:35:25.371577437Z INFO MongoDB connected
2020-08-11T12:35:25.372054104Z INFO [RBAC] Reloading user roles
2020-08-11T12:35:25.372382218Z INFO [RBAC] Removing roles for user kre_admin_user (dev@local.local)
2020-08-11T12:35:25.372396432Z INFO [RBAC] Adding role ADMIN to user kre_admin_user (dev@local.local)
2020-08-11T12:35:25.372769609Z INFO HTTP server started on :80
2020-08-11T12:35:29.48550533Z INFO Request from user kre_admin_user
2020-08-11T12:35:29.501522116Z INFO Request from user kre_admin_user
2020-08-11T12:35:30.479367476Z INFO Request from user kre_admin_user
&lt;/code>&lt;/pre>&lt;p>We should see at the very beginning of the API logs that the connection to MongoDB is fine and the service have started.&lt;/p></description></item><item><title>Docs: Coding a node</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/coding_a_node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/tasks/coding_a_node/</guid><description>
&lt;p>Here you will learn how to program a node in different languages.
Currently, KRE supports Python and Golang with an SDK that provides ways to receive, process and send messages on each
node.&lt;/p>
&lt;p>With the SDK you can implement the main two handler functions that a node needs. One optional function for
initialization, and one message handler function that will be the core of your node.&lt;/p>
&lt;p>Both these functions, &lt;code>init&lt;/code> and &lt;code>handler&lt;/code>, has an input parameter that is a shared context, and contains tools to
interact with KRE, store data, share memory values, etc.&lt;/p>
&lt;h2 id="python">Python&lt;/h2>
&lt;p>In Python your code will be dynamically loaded into the runner. The runner will look for functions with the following
signature &lt;code>init(ctx)&lt;/code> and &lt;code>handler(ctx, data)&lt;/code>. Both handlers are defined as async functions to enable the possibility
of performing async tasks.&lt;/p>
&lt;p>In this example we are creating a node that make predictions with a model that is included on your KRT file. You can
use the init function to load the model, so you only load it once to memory, and then use it for each incoming message
this node would get.&lt;/p>
&lt;h3 id="init-handler">Init handler&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">joblib&lt;/span>
&lt;span style="color:#000">async&lt;/span> &lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">init&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logger&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">info&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;[worker init]&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;model&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">joblib&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">load&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;models/model.joblib&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function signature is &lt;code>init(ctx)&lt;/code>. The context object have methods for logging and storing data that you
can later use on your message handler. It doesn&amp;rsquo;t need any return value.&lt;/p>
&lt;p>Note that &lt;code>models/model.joblib&lt;/code> must be included in your KRT file with this same relative path.
Check &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/create_krt_file/">how to create a KRT file&lt;/a> for more info.&lt;/p>
&lt;h3 id="message-handler">Message handler&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">pandas&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">pd&lt;/span>
&lt;span style="color:#000">async&lt;/span> &lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">handler&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logger&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">info&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;message received&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Create a dataframe from input dict&lt;/span>
&lt;span style="color:#000">df&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">pd&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DataFrame&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">from_dict&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Access pre-loaded data from context loaded on init() function &lt;/span>
&lt;span style="color:#000">model&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;model&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Run a prediction&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logger&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">info&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;running prediction&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">prediction&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">model&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">predict&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">df&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Return prediction value as a JSON serializable object&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;price_category&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">prediction&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">item&lt;/span>&lt;span style="color:#000;font-weight:bold">()}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The message handler signature is &lt;code>handler(ctx, data)&lt;/code>. The context object is the same from the init handler and is also
shared between different executions. You can &lt;code>set/get&lt;/code> data from its internal registry to store any value.&lt;/p>
&lt;p>Note that the &lt;strong>return value must be a JSON serializable object&lt;/strong> for KRE to process it correctly.&lt;/p>
&lt;h2 id="golang">Golang&lt;/h2>
&lt;p>KRE provides support for nodes running Golang code, but currently you need to compile the binary before generating the
KRT file. This may be also automated in future releases.&lt;/p>
&lt;p>Compile your binary for the architecture you need (amd/arm) and reference the resulting binary from your &lt;code>krt.yml&lt;/code>.
Check &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/create_krt_file/">how to create a KRT file&lt;/a> for more info.&lt;/p>
&lt;p>The SDK is provided as a library that you can import in your code as &lt;code>github.com/konstellation-io/kre/runners/kre-go&lt;/code>.&lt;/p>
&lt;p>You need to ctea The runner will look for functions with the following
signature &lt;code>init(ctx)&lt;/code> and &lt;code>handler(ctx, data)&lt;/code>. Both handlers are defined as async functions to enable the possibility
of performing async tasks.&lt;/p>
&lt;h3 id="init-handler-1">Init handler&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;github.com/konstellation-io/kre/runners/kre-go&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">handlerInit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">kre&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">HandlerContext&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Logger&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Info&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;init handler&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Saves a value in the context internal registry
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Set&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;greeting&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function signature is &lt;code>handlerInit(ctx)&lt;/code>. The context object have methods for logging and storing data that you
can later use on your message handler. It doesn&amp;rsquo;t need any return value.&lt;/p>
&lt;p>NOTE: &lt;code>handlerInit&lt;/code> is mandatory even if you don&amp;rsquo;t need to do any initialization code. The function needs to be defined
in order to invoke &lt;code>kre.Start()&lt;/code> later.&lt;/p>
&lt;h3 id="message-handler-1">Message handler&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">handler&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">kre&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">HandlerContext&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">interface&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Logger&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Info&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;message received&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Decode input data into your input message struct.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">input&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">Input&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">json&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unmarshal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Here you can do any transformation to your data.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">greetingText&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%s %s!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;greeting&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Name&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Logger&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Info&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">greetingText&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Prepare and return the output message.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">out&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">Output&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000">out&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Greeting&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">greetingText&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">out&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Must be a serializable JSON.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Input struct used to Unmarshal incoming []byte to the message handler.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Input&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Name&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`json:&amp;#34;name&amp;#34;`&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Output struct used as return value in message handler.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// It will be then serialized by the SDK before sending it to next node.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Output&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Greeting&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`json:&amp;#34;greeting&amp;#34;`&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The message handler signature is &lt;code>handler(ctx *kre.HandlerContext, data []byte) (interface{}, error) &lt;/code>. The context
object is the same from the init handler and is also shared between different executions. You can &lt;code>set/get&lt;/code> data from
its internal registry to store any value.&lt;/p>
&lt;p>Data input to the handler function is passed as &lt;code>[]byte&lt;/code>. You need to define an input and output structs that will be
used to unmarshal input messages and used as response.&lt;/p>
&lt;p>Note that the &lt;strong>return value must be a JSON serializable object&lt;/strong> for KRE to process it correctly.&lt;/p>
&lt;h3 id="start-the-runner">Start the runner&lt;/h3>
&lt;p>In your main function call the SDK &lt;code>Start&lt;/code> method passing both handlers you defined above:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">kre&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Start&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">handlerInit&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">handler&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Version Management</title><link>https://konstellation-io.github.io/website/docs/kre/tasks/version_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/tasks/version_management/</guid><description>
&lt;h3 id="version-lifecycle">Version lifecycle&lt;/h3>
&lt;p>In the following graph you can see all possible statuses and actions for a runtime version. The blue boxes are actions, and the green ones are statuses:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/version_management/version_lifecycle_hu3d0103200f92e22fba46921b44813a51_104333_1000x0_resize_q75_catmullrom.jpg" width="1000" height="349">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="version-management">Version management&lt;/h2>
&lt;p>In the version details screen we can manage the opened version. There are four actions that we can perform using the left-bottom buttons: start, stop, publish and un-publish. When we perform some of these actions the version status change. The following table shows all possible version status:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Status&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>stopping&lt;/code>&lt;/td>
&lt;td>Indicates the version is deleting their associated k8s resources.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stopped&lt;/code>&lt;/td>
&lt;td>The version is created in KRE but it is not consuming any resource because all components are not created at k8s.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>starting&lt;/code>&lt;/td>
&lt;td>The version is creating their associated k8s resources.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>started&lt;/code>&lt;/td>
&lt;td>The version entrypoint and processes are running and ready in k8s. The entrypoint ingress is not created so you cannot call it from outside.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>published&lt;/code>&lt;/td>
&lt;td>The entrypoint is accessible from outside and the incoming request can be managed by the processes.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>All of these actions ask the user to input a reason that is registered as an audit log. An &lt;code>admin&lt;/code> or &lt;code>manager&lt;/code> user can see all users activity on the audit list (&lt;code>/audit&lt;/code>).&lt;/p>
&lt;h3 id="start-a-version">Start a version&lt;/h3>
&lt;p>Clicking the &lt;code>Start&lt;/code> button and providing the reason text we will see that the version goes to the &lt;code>starting&lt;/code> status and after a time changes to &lt;code>started&lt;/code>.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/tasks/version_management/version_started_hu7848eb828a18e41987a0e2d9b524ab45_53884_1000x0_resize_catmullrom_2.png" width="1000" height="910">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>The processes color should be green, this means that the processes are ready and listening for incoming messages.&lt;/p>
&lt;h3 id="stop-a-version">Stop a version&lt;/h3>
&lt;p>Using the action buttons you can press the &lt;code>Stop&lt;/code> button when the version is &lt;code>started&lt;/code> or &lt;code>starting&lt;/code>.
Use this action when you want to delete all associated resources in kubernetes for this version.
The collected logs and metrics will be persisted after stopping.&lt;/p>
&lt;h3 id="publish-a-version">Publish a version&lt;/h3>
&lt;p>A started version with all nodes on green means that the version is ready to receive messages, but it is not exposed to the outside world until you decide to publish it.
You can use this state to be sure all pieces of the workflow are working correctly before publishing.&lt;/p></description></item><item><title>Docs: Call Version Services</title><link>https://konstellation-io.github.io/website/docs/kre/tasks/consume_version_services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/tasks/consume_version_services/</guid><description>
&lt;p>Once you have a published version you can call it from outside through the entrypoint gRPC services.&lt;/p>
&lt;p>For this example the pre requisites are:&lt;/p>
&lt;ul>
&lt;li>An existing Runtime called &lt;code>Test&lt;/code>.&lt;/li>
&lt;li>A &lt;strong>published version&lt;/strong> containing a workflow pointing to a &lt;code>Greeting&lt;/code> service in the entrypoint.&lt;/li>
&lt;/ul>
&lt;p>To learn how to get this requisites you can check &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/">KRT tasks&lt;/a> and &lt;a href="https://konstellation-io.github.io/website/website/docs/kre/tasks/version_management/">KRE version management&lt;/a>.&lt;/p>
&lt;h2 id="call-from-cli">Call from CLI&lt;/h2>
&lt;p>The fastest way to interact with the gRPC server is with &lt;a href="https://github.com/fullstorydev/grpcurl">grpcurl&lt;/a>. This tool is similar to &lt;code>curl&lt;/code> but for gRPC servers.&lt;/p>
&lt;p>Just run this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">grpcurl -insecure -d &lt;span style="color:#4e9a06">&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;John&amp;#34;}&amp;#39;&lt;/span> entrypoint.kre-test.local:443 entrypoint.Entrypoint/Greet
&lt;span style="color:#8f5902;font-style:italic"># Outputs&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;greeting&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;Hello John!&amp;#34;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="call-from-grpc-client-on-golang">Call from gRPC client on Golang&lt;/h2>
&lt;h3 id="get-proto-file-from-the-entrypoint">Get proto file from the Entrypoint&lt;/h3>
&lt;p>To create a gRPC client you need the proto file to generate code with &lt;code>protoc&lt;/code> tool. Each entrypoint has its proto file published in KRE, for this example you can access it at &lt;code>http://proto.kre-test.local/&lt;/code> (assuming your Runtime is called &amp;ldquo;Test&amp;rdquo;). You will see a file named &lt;code>public_input.proto&lt;/code> that you have to download.&lt;/p>
&lt;h3 id="generate-code-with-protoc">Generate code with protoc&lt;/h3>
&lt;p>Inside the folder you are creating the client add a folder named &lt;code>entrypoint&lt;/code> and put &lt;code>public_input.proto&lt;/code> file inside.&lt;/p>
&lt;p>Now you can run &lt;code>protoc&lt;/code> to generate the gRPC client code:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">protoc --go_out&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">plugins&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>grpc:. public_input.proto
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After running this command you will see a new file called &lt;code>public_input.pb.go&lt;/code> in the same folder.&lt;/p>
&lt;h3 id="code-the-grpc-client">Code the gRPC client&lt;/h3>
&lt;p>Create two files, one called &lt;code>go.mod&lt;/code> for Go to manage dependencies, and another file named &lt;code>main.go&lt;/code>.&lt;/p>
&lt;h4 id="gomod-file">go.mod file&lt;/h4>
&lt;pre>&lt;code>module greeter-client
go 1.15
require (
github.com/golang/protobuf v1.4.2
google.golang.org/grpc v1.31.0
)
&lt;/code>&lt;/pre>&lt;h4 id="maingo-file">main.go file&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">
&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;context&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;crypto/tls&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;google.golang.org/grpc/credentials&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;greeter-client/entrypoint&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Client started&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;entrypoint.kre-test.local:443&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">tlsConf&lt;/span> &lt;span style="color:#000">tls&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Config&lt;/span>
&lt;span style="color:#000">tlsConf&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">InsecureSkipVerify&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>
&lt;span style="color:#000">grpcOptions&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">grpc&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithTransportCredentials&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">credentials&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewTLS&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">tlsConf&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">cc&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">grpc&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Dial&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">address&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">grpcOptions&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Fatalf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Could not connect: %v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">cc&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Close&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewEntrypointClient&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cc&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">req&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Request&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Go GRPC Client&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">res&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Greet&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Background&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">req&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Fatalf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Error calling RuntimeRPC: %v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Response from server: %v \n %#v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">res&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetGreeting&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">res&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="run-your-client">Run your client&lt;/h3>
&lt;p>Now you can run your Go client with this command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">go run .
&lt;span style="color:#8f5902;font-style:italic"># Outputs&lt;/span>
...
Response from server: Hello Go GRPC Client!
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Create a KRT</title><link>https://konstellation-io.github.io/website/docs/krt/tasks/create_krt_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/tasks/create_krt_file/</guid><description>
&lt;p>The end goal of Konstellation is to automate the generation of KRT files directly from KDL. This is currently on the list
of features to add on KDL but not developed yet.&lt;/p>
&lt;p>So, in order to create a KRT file, you need to create your own custom scripts to generate KRT files. Basically you need
to create a &lt;code>.tar.gz&lt;/code> file with the content of your version and then change its extension to &lt;code>.krt&lt;/code>.&lt;/p>
&lt;p>You can see a working example of this script on KRE repo: &lt;a href="https://github.com/konstellation-io/kre/blob/master/krt-template/build_krt.sh">build_krt.sh&lt;/a>&lt;/p>
&lt;h2 id="structure-guidelines">Structure guidelines&lt;/h2>
&lt;p>The mandatory rules are these:&lt;/p>
&lt;ul>
&lt;li>a &lt;code>krt.yml&lt;/code> file on the root folder.&lt;/li>
&lt;li>(optional) a README.md file inside a &lt;code>docs&lt;/code> folder.&lt;/li>
&lt;/ul>
&lt;p>Other than that you are free to structure the content as you see fit.&lt;/p>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>This is how we structure or KRT files, and it&amp;rsquo;s probably the way it will be exported automatically from KDL.&lt;/p>
&lt;p>&lt;em>&lt;strong>NOTE&lt;/strong>&lt;/em>: This example match with the &lt;code>krt.yml&lt;/code> file used in &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/tasks/define_krt_yml/#example-file">krt.yml file example&lt;/a>&lt;/p>
&lt;pre>&lt;code>&amp;lt;root_folder&amp;gt;
- bin
- client-metrics # Go compiled binary for client-metric node
- docs
- README.md # Documentation showed as HTML on KRE
- models # Model assets used on execute_model node
model.joblib
encoder.joblib
- src # Source code of each node
- etl
- execute_etl.py
- execute_model
- execute_model.py
- output
- output.py
- client-metrics
- main.go
- go.mod
- kry.yml # KRT file definition
- public_input.proto # Used to define entrypoint GRPC messages and services.
&lt;/code>&lt;/pre></description></item><item><title>Docs: Customization</title><link>https://konstellation-io.github.io/website/docs/kre/installation/customization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/customization/</guid><description>
&lt;p>It is posible to configure a lot of aspects of a KRE deployment, depending on your environment and your usecase the default values are not enough.
Below are described all the parameters suceptible to be changed to adapt KRE Helm Chart to your environment. You can create your own &lt;code>values.yaml&lt;/code> with these
parameters customized to be applied when run Helm. In order to get a more clear idea where can find
the parameter that you need to modify we have split the parameters in some sections by configuration goals.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#config">Config&lt;/a>&lt;/li>
&lt;li>&lt;a href="#runtime">Runtime&lt;/a>&lt;/li>
&lt;li>&lt;a href="#admin-api">Admin API&lt;/a>&lt;/li>
&lt;li>&lt;a href="#admin-ui">Admin UI&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mongodb">MongoDB&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cert-manager">Cert Manager&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#dns01">DNS01&lt;/a>&lt;/li>
&lt;li>&lt;a href="#http01">HTTP01&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#prometheus">Prometheus&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="config">Config&lt;/h2>
&lt;p>Under this section are all the parameters that are used by multiple components in order to not repeat, also general
configuration related with the behaviour of KRE and not just specific components requirements like Docker images, services ports,
storage size, etc.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>config.baseDomainName&lt;/code>&lt;/td>
&lt;td>Domain name used to access KRE&lt;/td>
&lt;td>&lt;code>local&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.apiAddress&lt;/code>&lt;/td>
&lt;td>Base internal URL for Api Server&lt;/td>
&lt;td>&lt;code>:3000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.apiBaseURL&lt;/code>&lt;/td>
&lt;td>Base public URL for Api Server&lt;/td>
&lt;td>&lt;code>api.kre.local&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.frontendBaseURL&lt;/code>&lt;/td>
&lt;td>Base URL to connect from frontent&lt;/td>
&lt;td>&lt;code>http://localhost:3000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.corsEnabled&lt;/code>&lt;/td>
&lt;td>Activate CORS in Admin API&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.userEmail&lt;/code>&lt;/td>
&lt;td>Emain for default Admin user&lt;/td>
&lt;td>&lt;code>dev@local.local&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.enabled&lt;/code>&lt;/td>
&lt;td>Activate SMTP&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.sender&lt;/code>&lt;/td>
&lt;td>SMTP Sender Email&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.senderName&lt;/code>&lt;/td>
&lt;td>SMTP Sender Name&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.user&lt;/code>&lt;/td>
&lt;td>SMTP User to connect&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.pass&lt;/code>&lt;/td>
&lt;td>SMTP Password to connect&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.host&lt;/code>&lt;/td>
&lt;td>SMTP Host to connect&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.port&lt;/code>&lt;/td>
&lt;td>SMTP Port to connect&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.auth.verificationCodeDurationInMinutes&lt;/code>&lt;/td>
&lt;td>User Verification Code Duration In Minutes&lt;/td>
&lt;td>&lt;code>1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.auth.jwtSignSecret&lt;/code>&lt;/td>
&lt;td>JWT Sign Secret Key&lt;/td>
&lt;td>&lt;code>jwt_secret&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.auth.secureCookie&lt;/code>&lt;/td>
&lt;td>Activate secure cookie&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="runtime">Runtime&lt;/h2>
&lt;p>Within &lt;code>config.runtime&lt;/code> you can setup some parameters that will affect when a new Runtime is created, for example the storageClass
to create the volumes of the base service of a runtime.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>config.runtime.sharedStorageClass&lt;/code>&lt;/td>
&lt;td>StorageClass to use RWX volume for Minio and Runners on Runtimes&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.sharedStorageSize&lt;/code>&lt;/td>
&lt;td>Volume size for Minio and Runners on Runtimes&lt;/td>
&lt;td>&lt;code>2Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.nats_streaming.storage.className&lt;/code>&lt;/td>
&lt;td>StorageClass to create volumes for NATS pods&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.nats_streaming.storage.size&lt;/code>&lt;/td>
&lt;td>Size of volume attached to NATS Pod&lt;/td>
&lt;td>&lt;code>1Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.mongodb.persistentVolume.enabled&lt;/code>&lt;/td>
&lt;td>This parameter enable the persistence of MongoDB&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.mongodb.persistentVolume.storageClass&lt;/code>&lt;/td>
&lt;td>StorageClass to create volumes for MongoDB&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.mongodb.persistentVolume.size&lt;/code>&lt;/td>
&lt;td>Size of volume attached to MongoDB Pod&lt;/td>
&lt;td>&lt;code>5Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.chronograf.persistentVolume.enabled&lt;/code>&lt;/td>
&lt;td>This parameter enable the persistence of Chronograf&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.chronograf.persistentVolume.storageClass&lt;/code>&lt;/td>
&lt;td>StorageClass to create volumes for Chronograf&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.chronograf.persistentVolume.size&lt;/code>&lt;/td>
&lt;td>Size of volume attached to Chronograf Pod&lt;/td>
&lt;td>&lt;code>1Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.influxdb.persistentVolume.enabled&lt;/code>&lt;/td>
&lt;td>This parameter enable the persistence of InfluxDB&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.influxdb.persistentVolume.storageClass&lt;/code>&lt;/td>
&lt;td>StorageClass to create volumes for InfluxDB&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.influxdb.persistentVolume.size&lt;/code>&lt;/td>
&lt;td>Size of volume attached to InfluxDB Pod&lt;/td>
&lt;td>&lt;code>5Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="admin-api">Admin API&lt;/h2>
&lt;p>Specific configuration for Admin API&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>admin-api.image.repository&lt;/code>&lt;/td>
&lt;td>Docker registry to download the admin-api image&lt;/td>
&lt;td>&lt;code>konstellation/kre-admin-api&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.image.tag&lt;/code>&lt;/td>
&lt;td>Version of the admin-api Docker image to deploy&lt;/td>
&lt;td>&lt;code>latest&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.image.pullPolicy&lt;/code>&lt;/td>
&lt;td>Define when Kubernetes has to pull a Docker image&lt;/td>
&lt;td>&lt;code>IfNotPresent&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.service.port&lt;/code>&lt;/td>
&lt;td>TCP port where is going to listen the internal service&lt;/td>
&lt;td>&lt;code>4000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.tls.enabled&lt;/code>&lt;/td>
&lt;td>If we want to enable HTTPS access to the API. For this Cert Manager is required in the Kuberentes cluster&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.host&lt;/code>&lt;/td>
&lt;td>Public hostname to generate SSL certificate with Cert Manager&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="admin-ui">Admin UI&lt;/h2>
&lt;p>Specific configuration for Admin UI&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>admin-ui.image.repository&lt;/code>&lt;/td>
&lt;td>Docker registry to download the admin-ui image&lt;/td>
&lt;td>&lt;code>konstellation/kre-admin-ui&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.image.tag&lt;/code>&lt;/td>
&lt;td>Version of the admin-ui Docker image to deploy&lt;/td>
&lt;td>&lt;code>latest&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.image.pullPolicy&lt;/code>&lt;/td>
&lt;td>Define when Kubernetes has to pull a Docker image&lt;/td>
&lt;td>&lt;code>IfNotPresent&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.service.port&lt;/code>&lt;/td>
&lt;td>TCP port where is going to listen the internal service&lt;/td>
&lt;td>&lt;code>5000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.tls.enabled&lt;/code>&lt;/td>
&lt;td>If we want to enable HTTPS access to the UI. For this Cert Manager is required in the Kuberentes cluster&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.host&lt;/code>&lt;/td>
&lt;td>Public hostname to generate SSL certificate with Cert Manager&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="mongodb">MongoDB&lt;/h2>
&lt;p>Specific configuration for the MongoDB on the Engine.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>mongodb.mongodbDatabase&lt;/code>&lt;/td>
&lt;td>Database to create&lt;/td>
&lt;td>&lt;code>localKRE&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mongodb.mongodbUsername&lt;/code>&lt;/td>
&lt;td>MongoDB custom user (mandatory if &lt;code>mongodbDatabase&lt;/code> is set)&lt;/td>
&lt;td>&lt;code>admin&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mongodb.mongodbPassword&lt;/code>&lt;/td>
&lt;td>MongoDB custom user password&lt;/td>
&lt;td>&lt;code>123456&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mongodb.image.tag&lt;/code>&lt;/td>
&lt;td>MongoDB version 4.2&lt;/td>
&lt;td>&lt;code>3.6&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="cert-manager">Cert Manager&lt;/h2>
&lt;p>As described on previous sections of this guide KRE use Cert Manager to manage the lifecycle of the certificates to
add a security layer on the comunication from outside.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>certManager.enabled&lt;/code>&lt;/td>
&lt;td>Enable Cert Manager to validate certificates&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.acme.server&lt;/code>&lt;/td>
&lt;td>Default certificate authority server to validate certificates, more instructions below&lt;/td>
&lt;td>&lt;code>acme-v02.api.letsencrypt.org/directory&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.acme.email&lt;/code>&lt;/td>
&lt;td>Default email for the certificate owner&lt;/td>
&lt;td>&lt;code>user@email.com&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can fill in the field &lt;code>certManager.acme.server&lt;/code> with one of the following values depend of your environment:&lt;/p>
&lt;p>&lt;strong>Production environment&lt;/strong>&lt;/p>
&lt;pre>&lt;code> certManager:
acme:
server: https://acme-v02.api.letsencrypt.org/directory
&lt;/code>&lt;/pre>&lt;p>Rate limit of 50 per day on certificates request with a week block if the limit is passed.&lt;a href="https://letsencrypt.org/docs/rate-limits/">+ info&lt;/a>&lt;/p>
&lt;p>No web-browser action required.&lt;/p>
&lt;p>&lt;strong>Staging environment&lt;/strong>&lt;/p>
&lt;pre>&lt;code> certManager:
acme:
server: https://acme-staging-v02.api.letsencrypt.org/directory
&lt;/code>&lt;/pre>&lt;p>Rate limit of 1500 each three hours on certificates request.&lt;a href="https://letsencrypt.org/docs/staging-environment/">+ Info&lt;/a>&lt;/p>
&lt;p>This option needs the following action from user to set-up the staging certification authority.&lt;/p>
&lt;p>&lt;strong>How add the fake certificate on chrome&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Download the certificate &lt;a href="https://letsencrypt.org/certs/fakeleintermediatex1.pem">Fake Certificate&lt;/a>&lt;/li>
&lt;li>Go to settings -&amp;gt; Search Certificates -&amp;gt; Manage Certificates -&amp;gt; Issuers Entities&lt;/li>
&lt;li>Import the previous certificate.&lt;/li>
&lt;li>Enable the first option.&lt;/li>
&lt;li>Reload the https://admin.&lt;your-domain> page&lt;/li>
&lt;li>You have a certificate for any kre domain.&lt;/li>
&lt;/ul>
&lt;p>Regarding the challenge method used for validation of the CSR we are going to describe two kinds supported by Cert Manager, but
may be there are another methods that fits better for your environment, please refer to the &lt;a href="https://cert-manager.io/docs/configuration/">Cert Manager documentation&lt;/a> in order to
create a more accurate configuration.&lt;/p>
&lt;h3 id="dns01">DNS01&lt;/h3>
&lt;p>If you hosted the subdomain &lt;code>kre.yourdomain.com&lt;/code> in Route53 is posible to configure the validation of the CSR with DNS via a
Route53 plugin. Below there is a snippet of config to add to your &lt;code>values.yaml&lt;/code> to configure this challenge. This is very
usefull in deployments that are behind a firewall with restricted access from Internet or just in a private network.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>certManager.dns01.route53.region&lt;/code>&lt;/td>
&lt;td>AWS Region where the hosted zome is created&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.dns01.route53.hostedZoneID&lt;/code>&lt;/td>
&lt;td>AWS Hosted Zone ID&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.dns01.route53.accessKeyID&lt;/code>&lt;/td>
&lt;td>AWS Access Key ID&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.dns01.route53.secretAccessKey&lt;/code>&lt;/td>
&lt;td>AWS Access Secret Key&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="http01">HTTP01&lt;/h3>
&lt;p>When KRE is open to Internet and you can not configure your subdomain to be hosted in Route53 you can use this challenge.
The validation is done just with a HTTP request from the Let&amp;rsquo;s Encrypt servers. Just need to set as enable.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>certManager.http01.enabled&lt;/code>&lt;/td>
&lt;td>Enable the HTTP01 challenge&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="prometheus">Prometheus&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>prometheusOperator.enabled&lt;/code>&lt;/td>
&lt;td>This parameter indicate if you want that when KRE is deployed also deploy Prometheus Operator, may be you have already deployed this on your cluster and is not required to be installed.&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>prometheusOperator.grafana.enabled&lt;/code>&lt;/td>
&lt;td>Disable the installation of Grafana with the Prometheus Operator&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>
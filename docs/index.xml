<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konstellation â€“ Documentation</title><link>https://konstellation-io.github.io/website/docs/</link><description>Recent content in Documentation on Konstellation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://konstellation-io.github.io/website/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Helm basics</title><link>https://konstellation-io.github.io/website/docs/kre/installation/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/helm/</guid><description>
&lt;p>KRE can be installed on top of a Kubernetes cluster using the &lt;a href="https://helm.sh/">Helm&lt;/a> package manager.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Helm v3 or later&lt;/li>
&lt;li>Kubernetes v1.15+&lt;/li>
&lt;/ul>
&lt;h2 id="install-the-chart">Install the chart&lt;/h2>
&lt;ol>
&lt;li>Add the Konstellation Helm repository:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm repo add konstellation-io https://charts.konstellation.io
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Optionally, create a namespace to deploy all KRE components or skip this step using a created one:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create namespace kre
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Run the following command, providing a name for your KRE release (in this case &lt;code>kre&lt;/code>) and specifying the namespace:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm upgrade --install kre --namespace kre konstellation-io/kre
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uninstall-the-chart">Uninstall the chart&lt;/h2>
&lt;p>To uninstall the &lt;code>kre&lt;/code> deployment, use the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm uninstall kre
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command removes all the Kubernetes components associated with the chart and deletes the release.&lt;/p></description></item><item><title>Docs: KRE Overview</title><link>https://konstellation-io.github.io/website/docs/kre/overview/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/overview/</guid><description>
&lt;p>Konstellation Runtime Engine is an application that allow to run AI/ML models for inference based on the content of a &lt;code>.krt&lt;/code> file.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Component&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Admin UI&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Admin API&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>K8s Manager&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Runtime API&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>K8s Runtime Operator&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Runner Python&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Runner Go&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;p>KRE is designed based on a microservice pattern to be run on top of a Kubernetes cluster.&lt;/p>
&lt;p>The following diagram describes the main components and the relationship each other:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/overview/kre-architecture_hub0d560802a8967b3a1f0d5221789fbcb_211258_1000x0_resize_catmullrom_2.png" width="1000" height="545">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
KRE Architecture.
&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Minikube</title><link>https://konstellation-io.github.io/website/docs/kre/installation/minikube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/minikube/</guid><description/></item><item><title>Docs: Overview</title><link>https://konstellation-io.github.io/website/docs/krt/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/overview/</guid><description>
&lt;p>KRT stands for &lt;strong>Konstellation Runtime Transport&lt;/strong>.&lt;/p>
&lt;p>Is the file format used in Konstellation as an easy way to move between Development (KDL) to Production (KRE) environments.&lt;/p>
&lt;p>A KRT file is a single and self-contained file with everything needed for a solution to be deployed on KRE.&lt;/p>
&lt;p>A KRT file is compressed in &lt;code>.tar.gz&lt;/code> format and renamed to &lt;code>.krt&lt;/code> extension, it contains definition and all components
of Runtime Version.&lt;/p>
&lt;h2 id="krt-file-contents">KRT file contents&lt;/h2>
&lt;p>A KRT file defines a Runtime Version, it includes the following:&lt;/p>
&lt;ul>
&lt;li>a definition YAML file named &lt;code>krt.yml&lt;/code>.&lt;/li>
&lt;li>source code of all components.&lt;/li>
&lt;li>assets needed by each component.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Folder structure</title><link>https://konstellation-io.github.io/website/docs/krt/folder_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/folder_structure/</guid><description>
&lt;p>The KRT file contains all assets and source code needed for the given version to run.&lt;/p>
&lt;p>The mandatory rules are these:&lt;/p>
&lt;ul>
&lt;li>a &lt;code>krt.yml&lt;/code> file on the root folder.&lt;/li>
&lt;li>(optional) a README.md file inside a &lt;code>docs&lt;/code> folder.&lt;/li>
&lt;/ul>
&lt;p>Other than that you are free to structure the content as you see fit.&lt;/p>
&lt;h2 id="structure-guidelines">Structure guidelines&lt;/h2>
&lt;p>This is how we structure or KRT files, and it&amp;rsquo;s probably the way it will be exported automatically from KDL.&lt;/p>
&lt;h3 id="example-structure">Example structure&lt;/h3>
&lt;p>&lt;em>&lt;strong>NOTE&lt;/strong>&lt;/em>: This example match with the &lt;code>krt.yml&lt;/code> file used in &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/krt_yaml_file/#example-file">krt.yml file example&lt;/a>&lt;/p>
&lt;pre>&lt;code>&amp;lt;root_folder&amp;gt;
- bin
- client-metrics # Go compiled binary for client-metric node
- docs
- README.md # Documentation showed as HTML on KRE
- models # Model assets used on execute_model node
model.joblib
encoder.joblib
- src # Source code of each node
- etl
- execute_etl.py
- execute_model
- execute_model.py
- output
- output.py
- client-metrics
- main.go
- go.mod
- kry.yml # KRT file definition
- public_input.proto # Used to define entrypoint GRPC messages and services.
&lt;/code>&lt;/pre></description></item><item><title>Docs: GKE</title><link>https://konstellation-io.github.io/website/docs/kre/installation/gke/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/gke/</guid><description/></item><item><title>Docs: EKS</title><link>https://konstellation-io.github.io/website/docs/kre/installation/eks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/eks/</guid><description>
&lt;h1 id="eks-deployment">EKS deployment&lt;/h1>
&lt;p>The flavor of Kubernetes on AWS is called EKS (Elastic Kubernetes Service) which allow to deploy a cluster managed by Amazon. This means that Amazon will manage the lifecyle of the Master nodes of our cluster.&lt;/p>
&lt;p>Currently there are two ways of run loads on top of EKS, using EC2 instances as compute nodes that are added to to the cluster or using the Fargate mode, where AWS also manage these compute nodes. In this guide is just described the first one, adding our own compute nodes with EC2 instances.&lt;/p>
&lt;p>Deploy an EKS cluster is not the goal of this guide, only the detail some specific configuration needed to run KRE on top of it. It is recomend to use IaC (Infrastructure As Code) approach using Terraform to automate the creation of your cluster, &lt;a href="https://learn.hashicorp.com/tutorials/terraform/eks">here&lt;/a> you can find usefull resources about that. Also you can follow the instructions from the official &lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html">AWS site&lt;/a>.&lt;/p>
&lt;p>The final EKS deployment should be something like the below diagram.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/installation/eks/eks_diagram_hu810904b9cb0bf96ab0f9422ba192b8fc_30553_600x0_resize_catmullrom_2.png" width="600" height="512">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h1 id="storage">Storage&lt;/h1>
&lt;p>An important amount of features of KRE are based on the use of shared storage with &lt;code>ReadWriteMany&lt;/code> volumes. Therefore is required to add a storageClass to Kubernetes that support this kind of volumes.&lt;/p>
&lt;p>In AWS there are a service called EFS (Elastic File System) that bring to us a network shared storage. As was mentioned before, the recomended way to create resources is using the approach of IaC, for EFS you can find examples of Terraform code &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/efs_mount_target">here&lt;/a>, or follow the manual steps from the &lt;a href="https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html">AWS site&lt;/a>.&lt;/p>
&lt;p>The common way to use this from Kubernetes is deploying what is called &lt;code>efs-provisioner&lt;/code> that create the interface between Kubernetes &lt;code>PersistentVolumeClaim&lt;/code> and EFS.&lt;/p>
&lt;p>In our experience we have had some issues with the &lt;code>efs-provisioner&lt;/code>, therefore instead of deploy an &lt;code>efs-provisioner&lt;/code> to support the creation of volumes on EFS we prefer to add a script to the &lt;code>UserData&lt;/code> of each EC2 instance to mount the shared EFS on a local mount point, for example on &lt;code>/mnt/efs/kre&lt;/code>, and create a &lt;code>HostPath&lt;/code> storageClass that will create all the volumes within this path. This way we can create &lt;code>ReadWriteMany&lt;/code> volumes that are accesible from all the nodes of our cluster. The &lt;code>UserData&lt;/code> script example is below, and is good practice to set it in the &lt;code>Launch Configuration&lt;/code> that manage the EC2 instance which are the compute nodes of our cluster.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87">set&lt;/span> -o xtrace
/etc/eks/bootstrap.sh --apiserver-endpoint &lt;span style="color:#4e9a06">&amp;#39;https://xxxxxxxxxxx.gr7.us-east-1.eks.amazonaws.com&amp;#39;&lt;/span> --b64-cluster-ca &lt;span style="color:#4e9a06">&amp;#39;xxxxxxxxxxxxx&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;kre&amp;#39;&lt;/span>
mkdir -p /mnt/efs/kre
yum install amazon-efs-utils -y
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;fs-xxxxxxxx.efs.us-east-1.amazonaws.com:/ /mnt/efs/kre efs tls,_netdev&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/fstab
mount -a -t efs defaults
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the next section is described how to install the &lt;code>hostPath&lt;/code> provisioner.&lt;/p>
&lt;p>Network shared storage can be a bottle neck of performance, so depend of your usecase you should use only for the pieces that require
&lt;code>ReadWriteMany&lt;/code> volume, for the rest of the components you can use the default storageClass that will create an EBS resource on AWS. In the &lt;a href="#helm-deployment">Helm deployment&lt;/a> section is detailed the best option for your usecase and which pieces can use which storageClass.&lt;/p>
&lt;h1 id="kubernetes-required-components">Kubernetes required components&lt;/h1>
&lt;p>Some additional components are required on Kubernetes to get a full featured KRE deployment running. We are going to describe how to install those.&lt;/p>
&lt;h2 id="ingress-controller">Ingress controller&lt;/h2>
&lt;p>The use of Ingress Controller in Kubernetes that are deployed on cloud providers is very common, due to the reduction of costs on
load balancers, also the ingress objects help with the automation of some task when publish service to outside of our cluster, and many more.&lt;/p>
&lt;p>There are multiple choices of Ingress Controller (NGINX, Traefik, HAProxy, Kong, &amp;hellip;), you can find a full list of those
in the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/">Kubernetes site&lt;/a>, and all of them have pros and cons, in this guide we are going to explain how to deploy NGINX Ingress Controller. It is posible to use KRE with other Ingress Controller than NGINX, but this is matained by the CNCF and the maturity of NGINX itself is quite important.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm upgrade --install &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --namespace kube-system &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --version 1.40.2 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> nginx-ingress &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> stable/nginx-ingress
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cert-manager">Cert manager&lt;/h2>
&lt;p>The access to the web admin interface of KRE and all the endpoints that are exposed to the end users required of a minimun level of security,
this is the reason why add a piece to automate the management of the lifecycle of all required certificates.&lt;/p>
&lt;p>Cert Manager allow to create certificates just with some configuration on the deployment process, and manage the lifecycle of those, updating those when expired without any human interaction. Moreover, with
the use of &lt;code>DNS01&lt;/code> challenge method can be created certificates for environment that are not exposed to Internet behind a firewall in a private network.&lt;/p>
&lt;p>In order to install Cert Manager we are going to use the official Helm chart. Below are the commands to deploy it within the Kubernetes namespace &lt;code>cert-manager&lt;/code>, be aware that this is just a convention, you can deploy it in the namespace where you feel more confortable.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create namespace cert-manager --dry-run -o yaml &lt;span style="color:#000;font-weight:bold">|&lt;/span> kubectl apply -f -
helm repo add jetstack https://charts.jetstack.io
helm repo update
helm upgrade --install &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --namespace cert-manager &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --version v0.15.0 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --set &lt;span style="color:#000">installCRDs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> cert-manager &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> jetstack/cert-manager
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="storage-provisioner">Storage provisioner&lt;/h2>
&lt;p>In order to create the &lt;code>hostPath&lt;/code> provisioner just install the Helm chart as shown below.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm upgrade --install hostpath-provisioner --namespace kube-system rimusz/hostpath-provisioner
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="dns">DNS&lt;/h1>
&lt;p>All the access to KRE services require of hostnames, due to the use of Ingress object and certificates. In order to get a
deployment and management processes easier we recommend to delegate a subdomain to a &lt;code>Route53&lt;/code> DNS zone, and create a wildcard
entry pointing to the Load Balancer of the Ingress Controller.&lt;/p>
&lt;h1 id="helm-deployment">Helm deployment&lt;/h1></description></item><item><title>Docs: krt.yml</title><link>https://konstellation-io.github.io/website/docs/krt/krt_yaml_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/krt_yaml_file/</guid><description>
&lt;p>This is a declarative file describing the content of the KRT.&lt;/p>
&lt;p>This file has general description of the Runtime Version, a GRPC entrypoint for the Runtime Version, nodes that are
connected between each other to form workflows that will be access through GRPC services defined on the entrypoint.&lt;/p>
&lt;h2 id="definition">Definition&lt;/h2>
&lt;p>Here is a description of each field divided in five main concepts that make a KRT file:&lt;/p>
&lt;h3 id="metadata">Metadata&lt;/h3>
&lt;p>Descriptive information of the Runtime Version.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>version&lt;/strong>: the unique ID of this version.&lt;/li>
&lt;li>&lt;strong>description&lt;/strong>: brief text describing the content or functionality of this version.&lt;/li>
&lt;/ul>
&lt;h3 id="entrypoint">Entrypoint&lt;/h3>
&lt;p>This section describes how to access the Runtime Version.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>entrypoint&lt;/strong>:
&lt;ul>
&lt;li>&lt;strong>proto&lt;/strong>: protobuffer file describing messages and services contained in this Runtime Version.&lt;/li>
&lt;li>&lt;strong>image&lt;/strong>: base image adn tag used to run the entrypoint service. It&amp;rsquo;s provided by Konstellation registry.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="configuration">Configuration&lt;/h3>
&lt;p>This section describes all variables and files that are environment related and would be configured once the Runtime Version
is uploaded to a KRE instance. This includes sensible data that should not be included on the KRT file, for example passwords.&lt;/p>
&lt;p>All configuration defined here is mandatory, the Runtime Version won&amp;rsquo;t run if any of them is undefined.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config&lt;/strong>:
&lt;ul>
&lt;li>&lt;strong>variables&lt;/strong>: list of variable names that needs to be defined in KRE.&lt;/li>
&lt;li>&lt;strong>files&lt;/strong>: list of file names that needs to be filled in KRE.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="nodes">Nodes&lt;/h3>
&lt;p>This section includes a list of all existing components in the KRT file. Each component of a Runtime Version is a node.
To define each node in the krt file, you need to specify a name, a base image and its main source file.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>nodes&lt;/strong> (a list of):
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>: an identifier text, must be unique in the node list.&lt;/li>
&lt;li>&lt;strong>image&lt;/strong>: a base image provided by Konstellation used to run this node. It&amp;rsquo;s provided by Konstellation registry.&lt;/li>
&lt;li>&lt;strong>src&lt;/strong>: a path relative to the root of the KRT file pointing to the source file used to run this component.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="workflows">Workflows&lt;/h3>
&lt;p>This section includes the list of workflows contained in the KRT file. Each workflow connects one or more nodes between
each other and with a service defined in the entrypoint proto file.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>workflows&lt;/strong> (a list of):
&lt;ul>
&lt;li>&lt;strong>name&lt;/strong>: an identifier text, must be unique in the workflow list.&lt;/li>
&lt;li>&lt;strong>entrypoint&lt;/strong>: the name of a serviced defined in the proto buffer file of the entrypoint. See &lt;code>entrypoint.proto&lt;/code> above.&lt;/li>
&lt;li>&lt;strong>sequential&lt;/strong>: a list of node names that are connected sequentially as part of this workflow. All names should
exist on the node list defined above.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="example-file">Example file&lt;/h2>
&lt;p>This is a complete &lt;code>krt.yml&lt;/code> example matching the folder structure shown &lt;a href="https://konstellation-io.github.io/website/website/docs/krt/folder_structure/#example-structure">here&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">version&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>example-project&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">description&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>This&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>is&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>an&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>example&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>of&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>a&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>ML&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>project.&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">proto&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>public_input.proto&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-runtime-entrypoint&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">config&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">variables&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- API_KEY&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- API_SECRET&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">files&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- HTTPS_CERT&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">nodes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>etl&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-py&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>src/etl/execute_etl.py&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>execute-dl-model&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-py&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>src/execute_model/execute_model.py&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>create-output&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-py&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>src/output/output.py&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>konstellation/kre-go&lt;span style="color:#000;font-weight:bold">:&lt;/span>latest&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">src&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>bin/client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">workflows&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>prediction&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>MakePrediction&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sequential&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- etl&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- execute-dl-model&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- create-output&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>save-client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">entrypoint&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>SaveClientMetric&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">sequential&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- client-metrics&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Getting started</title><link>https://konstellation-io.github.io/website/docs/kre/getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/getting_started/</guid><description>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>First of all, you will need a KRE environment installed. Read more info about the installation &lt;a href="../installing-kre">here&lt;/a>.&lt;/p>
&lt;h2 id="login">Login&lt;/h2>
&lt;p>KRE login is a passwordless process so you only need to provide your email:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/login_screen_hu6b4d4c4402f13ef6689bedcf64656ae8_12794_600x0_resize_catmullrom_2.png" width="600" height="368">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>After submitting your email address you will see the following screen:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/login_passwordless_hu5fb6fdf09b0ac3b587961740a3982e57_31821_600x0_resize_catmullrom_2.png" width="600" height="432">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>You will receive an email with a login link:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/login_link_hu71fe54fbd1d880b0ebaac09911343df0_21486_600x0_resize_catmullrom_2.png" width="600" height="183">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>Clicking the login link you will navigate to the runtime list screen.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/user_viewer_huf43b978f320152200ba1f5efbcf7e93a_20229_1000x0_resize_catmullrom_2.png" width="1000" height="368">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>If you are a new user, your role will be &lt;code>viewer&lt;/code> so you should ask to the admin user for privileges for edition and creation (&lt;code>manager&lt;/code> role).
An &lt;code>admin&lt;/code> user can change the user role using the user administration interface (&lt;code>/settings/users&lt;/code>):&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/user_admin_hub9a3e132459504b3edb2f6bdc567690f_49810_1000x0_resize_catmullrom_2.png" width="1000" height="396">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="user-roles">User roles&lt;/h3>
&lt;p>There are three roles for users in KRE. The following table shows the available actions for each role/resource:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Role&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Metrics&lt;/th>
&lt;th>Runtimes&lt;/th>
&lt;th>Versions&lt;/th>
&lt;th>Audits&lt;/th>
&lt;th>Logs&lt;/th>
&lt;th>Settings&lt;/th>
&lt;th>Users&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>admin&lt;/td>
&lt;td>Full control&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>manager&lt;/td>
&lt;td>Can do anything but management of settings and users&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view/edit&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>viewer&lt;/td>
&lt;td>Only can see the metrics, created runtimes and its versions&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view&lt;/td>
&lt;td>view&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="create-a-new-runtime">Create a new Runtime&lt;/h2>
&lt;p>If you have &lt;code>manager&lt;/code> role, you will see the &amp;ldquo;ADD RUNTIME&amp;rdquo; button in the runtimes screen:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/runtimes_screen_hue4fd0a54479c3496d3bc183a61aaaea8_20361_1000x0_resize_catmullrom_2.png" width="1000" height="490">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>We are going to create a new runtime called &lt;code>test&lt;/code>:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/add_runtime_hu92d41c6992718aa3a74d49f59445185b_15287_600x0_resize_catmullrom_2.png" width="600" height="501">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>After clicking the &lt;code>save&lt;/code> button, we will see the &lt;code>test&lt;/code> runtime in the runtimes screen with status &lt;code>creating&lt;/code>.
At this moment KRE is creating all necessary resources inside Kubernetes and it can take a time.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/runtime_creating_hue45359b6cad59e1ee9c276af8929a8d3_33548_1000x0_resize_catmullrom_2.png" width="1000" height="394">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>After a while, the runtime status should be &lt;code>started&lt;/code> or if there was a problem with the initialization the status should be &lt;code>error&lt;/code>.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 410px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/runtime_started_hu0e5f734b8fed8551e4eb33c3c0dffe27_19158_400x0_resize_catmullrom_2.png" width="400" height="330">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="upload-a-new-version">Upload a new Version&lt;/h2>
&lt;p>When all runtime resources are ready, you can click the created runtime in order to see the list of versions:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/versions_screen_hu0d45c690b63171258cd8b378095e3e48_40429_1000x0_resize_catmullrom_2.png" width="1000" height="382">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>We are going to upload a version of the &lt;a href="https://github.com/konstellation-io/kre/tree/master/krt-template/greeter">greeting example&lt;/a>. You can download the krt file &lt;a href="./greeter-v1.krt">here&lt;/a>.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/add_version_hua3bbf1bfa17fdaedecdab412e92334e6_14685_600x0_resize_catmullrom_2.png" width="600" height="354">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>After creating the greeting version, you will see the version status screen:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/greeting_version_screen_huf340600169102cc7f0f117e79759b2e8_63501_1000x0_resize_catmullrom_2.png" width="1000" height="658">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>As you can see, the &lt;a href="https://github.com/konstellation-io/kre/tree/master/krt-template/greeter">greeting example&lt;/a> has two workflows called &lt;code>greeting&lt;/code> and &lt;code>saluting&lt;/code>. Both workflows have only one process called &lt;code>greeter&lt;/code>. The version status at this moment is &lt;code>stopped&lt;/code> so the &lt;code>greeter&lt;/code> processes color are grey. A workflow is a sequence of connected nodes, the first and the last node are called &lt;code>entrypoint&lt;/code>.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/greeting_version_screen_explained_hu618855afb64b2a97c4762ec269c4726e_194378_1000x0_resize_catmullrom_2.png" width="1000" height="657">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="version-lifecycle">Version lifecycle&lt;/h3>
&lt;p>In the following grahp you can see all posible statuses and actions for a runtime version. The blue boxes are actions and the green ones are statuses:&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/version_lifecycle_hu3d0103200f92e22fba46921b44813a51_104333_1000x0_resize_q75_catmullrom.jpg" width="1000" height="349">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="version-management">Version management&lt;/h2>
&lt;p>In the version details screen we can manage the opened version. There are four actions that we can perform using the left-bottom buttons: start, stop, publish and unpublish. When we perform some of these actions the version status change. The following table shows all possible version status:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Status&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>stopping&lt;/code>&lt;/td>
&lt;td>Indicates the version is deleting their associated k8s resources.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stopped&lt;/code>&lt;/td>
&lt;td>The version is created in KRE but it is not consuming any resource because all components are not created at k8s.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>starting&lt;/code>&lt;/td>
&lt;td>The version is creating their associated k8s resources.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>started&lt;/code>&lt;/td>
&lt;td>The version entrypoint and processes are running and ready in k8s. The entrypoint ingress is not created so you cannot call it from outside.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>published&lt;/code>&lt;/td>
&lt;td>The entrypoint is accesible from outside and the incoming request can be managed by the processes.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>All of these actions are important so you must provide a reason text and they are registered in the user audit list (&lt;code>/audit&lt;/code>). Only &lt;code>manager&lt;/code> or &lt;code>admin&lt;/code> users can view the user audit list.&lt;/p>
&lt;h3 id="start-a-version">Start a version&lt;/h3>
&lt;p>Clicking the &lt;code>Start&lt;/code> button and providing the reason text we will see that the version goes to the &lt;code>starting&lt;/code> status and after a time changes to &lt;code>started&lt;/code>.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 1010px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/getting_started/version_started_hu7848eb828a18e41987a0e2d9b524ab45_53884_1000x0_resize_catmullrom_2.png" width="1000" height="910">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>The processes color should be green, this means that the processes are ready and listening for incoming messages.&lt;/p>
&lt;h3 id="stop-a-version">Stop a version&lt;/h3>
&lt;p>Using the actions buttons you can press the &lt;code>Stop&lt;/code> button when the version is &lt;code>started&lt;/code> or &lt;code>starting&lt;/code>.
Use this action when you want to delete all associated resources in kubernetes for this version.
The collected logs and metrics will be persisted after stopping.&lt;/p>
&lt;h3 id="publish-a-version">Publish a version&lt;/h3>
&lt;p>A started version with all nodes on green means that the version is ready to receive messages but it is not .
You can use this state to be sure that all pieces of the workflow are working correctly before publishing.&lt;/p></description></item><item><title>Docs: Create a KRT file</title><link>https://konstellation-io.github.io/website/docs/krt/create_a_krt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/krt/create_a_krt/</guid><description>
&lt;p>The end goal of Konstellation is to automate the generation of KRT files directly from KDL. This is currently on the list
of features to add on KDL but not developed yet.&lt;/p>
&lt;p>So, in order to create a KRT file, you need to create your own custom scripts to generate KRT files. Basically you need
to create a &lt;code>.tar.gz&lt;/code> file with the content of your version and then change its extension to &lt;code>.krt&lt;/code>.&lt;/p>
&lt;p>You can see a working example of this script on KRE repo: &lt;a href="https://github.com/konstellation-io/kre/blob/master/krt-template/build_krt.sh">build_krt.sh&lt;/a>&lt;/p>
&lt;h2 id="using-golang">Using Golang&lt;/h2>
&lt;p>KRE provides support for nodes running Golang code, but currently you need to compile the binary before generating the
KRT file. This may be also automated in future releases.&lt;/p>
&lt;p>Compile your binary for the architecture you need (amd/arm) and reference the resulting binary from your &lt;code>krt.yml&lt;/code>.&lt;/p></description></item><item><title>Docs: Customization</title><link>https://konstellation-io.github.io/website/docs/kre/installation/customization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/customization/</guid><description>
&lt;h2 id="values">Values&lt;/h2>
&lt;p>The following table lists configurable parameters, their descriptions, and their default values stored in values.yaml.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Param&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>prometheusOperator.enabled&lt;/td>
&lt;td>Prometheus will be installed by default if you prefer use your own prometheus&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konstellation â€“ Installation</title><link>https://konstellation-io.github.io/website/docs/kre/installation/</link><description>Recent content in Installation on Konstellation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://konstellation-io.github.io/website/docs/kre/installation/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Local</title><link>https://konstellation-io.github.io/website/docs/kre/installation/local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/local/</guid><description>
&lt;h2 id="hardware-requirements">Hardware requirements&lt;/h2>
&lt;p>The local environment is deployed on top of a Minikube using the VirtualBox driver. The basic configuration creates a Virtual Machine with 8Gb and 4vCPUs. Due to this is recommended to run KRE on a machine with at least &lt;code>16GB&lt;/code> of RAM and &lt;code>4 CPU&lt;/code>.&lt;/p>
&lt;h2 id="software-requirements">Software Requirements&lt;/h2>
&lt;p>The recomended way to test KRE is deploy it on top of Minikube with VirtualBox driver. Deploying this way you can check a full featured installation of KRE.&lt;/p>
&lt;p>Install all these required software by following the guides linked bellow.&lt;/p>
&lt;p>&lt;a href="https://docs.docker.com/engine/install/">Docker&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/es/docs/tasks/tools/install-kubectl/">kubectl&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">Minikube&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://helm.sh/docs/intro/install/">Helm&lt;/a>&lt;/p>
&lt;h2 id="installation-with-krectlsh">Installation with krectl.sh&lt;/h2>
&lt;p>To hide all the complexity of installing and setting a local cluster, we&amp;rsquo;ve created a script called &lt;code>krectl.sh&lt;/code> in the &lt;a href="https://github.com/konstellation-io/kre">project repository&lt;/a> that do all the needed steps.&lt;/p>
&lt;p>This script is a development tool used for several tasks. From an end user point of view, you can run this command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./krectl.sh dev --skip-build
&lt;/code>&lt;/pre>&lt;/div>&lt;p>NOTE: the &lt;code>--skip-build&lt;/code> option means that the script won&amp;rsquo;t run a docker build for each component&amp;rsquo;s image. This is the default
behaviour but is only needed if you are going to develop any KRE component.&lt;/p>
&lt;p>After a couple of minutes you will have a running Minikube profile with a KRE installed and running. The script will also try an automatic login into the local admin section &lt;code>http://admin.kre.local&lt;/code> (see #validate-the-installation).&lt;/p>
&lt;h2 id="edit-your-hosts-file">Edit your hosts file&lt;/h2>
&lt;p>Get the cluster ip with the command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">minikube -p kre-local ip
&lt;span style="color:#8f5902;font-style:italic"># Output example&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 192.168.99.100&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add these lines to your &lt;code>/etc/hosts&lt;/code>&lt;/p>
&lt;pre>&lt;code>192.168.99.100 admin.kre.local
192.168.99.100 api.kre.local
&lt;/code>&lt;/pre>&lt;h2 id="validate-the-installation">Validate the installation&lt;/h2>
&lt;p>If every run correctly and you edited your hosts file, you should be able to login into KRE admin section. In a local environment there are no outgoing emails, but you can login with this command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./krectl.sh login
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Helm basics</title><link>https://konstellation-io.github.io/website/docs/kre/installation/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/helm/</guid><description>
&lt;p>KRE can be installed on top of a Kubernetes cluster using the &lt;a href="https://helm.sh/">Helm&lt;/a> package manager.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Helm v3 or later&lt;/li>
&lt;li>Kubernetes v1.15+&lt;/li>
&lt;/ul>
&lt;h2 id="install-the-chart">Install the chart&lt;/h2>
&lt;ol>
&lt;li>Add the Konstellation Helm repository:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm repo add konstellation-io https://charts.konstellation.io
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Optionally, create a namespace to deploy all KRE components or skip this step using a created one:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create namespace kre
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Run the following command, providing a name for your KRE release (in this case &lt;code>kre&lt;/code>) and specifying the namespace:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm upgrade --install kre --namespace kre konstellation-io/kre
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uninstall-the-chart">Uninstall the chart&lt;/h2>
&lt;p>To uninstall the &lt;code>kre&lt;/code> deployment, use the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm uninstall kre --namespace kre
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command removes all the Kubernetes components associated with the chart and deletes the release. It only removes main KRE components, you may need to remove other resources created by KRE.&lt;/p></description></item><item><title>Docs: Cloud</title><link>https://konstellation-io.github.io/website/docs/kre/installation/cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/cloud/</guid><description>
&lt;p>Following are described the best practice to deploy KRE on most common Kubernetes solution by Cloud providers.&lt;/p></description></item><item><title>Docs: Validate</title><link>https://konstellation-io.github.io/website/docs/kre/installation/validate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/validate/</guid><description>
&lt;h2 id="check-pods-on-kre-namespace">Check pods on KRE namespace&lt;/h2>
&lt;p>Command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n kre get pods
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Expected output:&lt;/p>
&lt;pre>&lt;code>NAME READY STATUS RESTARTS AGE
alertmanager-kre-local-prometheus-opera-alertmanager-0 2/2 Running 0 28h
kre-local-admin-api-75d8bdc6b9-n4qcv 1/1 Running 5 27h
kre-local-admin-ui-5d96987f95-9g59q 1/1 Running 0 27h
kre-local-grafana-67f89f8977-pqdmw 2/2 Running 0 28h
kre-local-k8s-manager-bddc586c4-kjhgf 1/1 Running 0 27h
kre-local-kube-state-metrics-78fbbcbfb8-64ds8 1/1 Running 0 28h
kre-local-prometheus-node-exporter-sx9sb 1/1 Running 0 28h
kre-local-prometheus-opera-operator-5b6f794b67-8lrdj 2/2 Running 0 28h
kre-mongo-0 1/1 Running 0 28h
prometheus-kre-local-prometheus-opera-prometheus-0 3/3 Running 1 28h
&lt;/code>&lt;/pre>&lt;h2 id="open-admin-web-console">Open Admin web console&lt;/h2>
&lt;p>If everything works fine you can go to &lt;a href="https://admin.kre.yourdomain.com">https://admin.kre.yourdomain.com&lt;/a> and see the admin UI as shown in the image bellow.&lt;/p>
&lt;div class="card rounded p-2 td-post-card mb-4 mt-4" style="max-width: 610px">
&lt;img class="card-img-top" src="https://konstellation-io.github.io/website/website/docs/kre/installation/validate/admin_web_hu51f4e7b3b1b2ceed12d523513c1d3459_36023_600x0_resize_q75_catmullrom.jpeg" width="600" height="463">
&lt;div class="card-body px-0 pt-2 pb-0">
&lt;p class="card-text">
&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="check-api-is-up">Check API is up&lt;/h2>
&lt;p>Command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -v https://api.kre.yourdomain.com
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Expected output:&lt;/p>
&lt;pre>&lt;code>* Trying 1.2.3.4:443...
* TCP_NODELAY set
* Connected to api.kre.yourdomain.com (1.2.3.4) port 443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
* CAfile: /etc/ssl/certs/ca-certificates.crt
CApath: /etc/ssl/certs
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.3 (IN), TLS handshake, Server hello (2):
* TLSv1.2 (IN), TLS handshake, Certificate (11):
* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
* TLSv1.2 (IN), TLS handshake, Server finished (14):
* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):
* TLSv1.2 (OUT), TLS handshake, Finished (20):
* TLSv1.2 (IN), TLS handshake, Finished (20):
* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256
* ALPN, server accepted to use h2
* Server certificate:
* subject: CN=api.kre.yourdomain.com
* start date: Aug 5 14:18:15 2020 GMT
* expire date: Nov 3 14:18:15 2020 GMT
* subjectAltName: host &amp;quot;api.kre.yourdomain.com&amp;quot; matched cert's &amp;quot;api.kre.yourdomain.com&amp;quot;
* issuer: C=US; O=Let's Encrypt; CN=Let's Encrypt Authority X3
* SSL certificate verify ok.
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
* Using Stream ID: 1 (easy handle 0x555789f5ddb0)
&amp;gt; GET / HTTP/2
&amp;gt; Host: api.kre.yourdomain.com
&amp;gt; user-agent: curl/7.68.0
&amp;gt; accept: */*
&amp;gt;
* Connection state changed (MAX_CONCURRENT_STREAMS == 128)!
&amp;lt; HTTP/2 404
&amp;lt; server: nginx/1.17.10
&amp;lt; date: Thu, 13 Aug 2020 08:53:16 GMT
&amp;lt; content-type: application/json; charset=UTF-8
&amp;lt; content-length: 24
&amp;lt; access-control-allow-credentials: true
&amp;lt; access-control-allow-origin:
&amp;lt; vary: Origin
&amp;lt; x-request-id: 74e620a75d284453082aabe95ca13958
&amp;lt; strict-transport-security: max-age=15724800; includeSubDomains
&amp;lt;
{&amp;quot;message&amp;quot;:&amp;quot;Not Found&amp;quot;}
* Connection #0 to host api.kre.yourdomain.com left intact
&lt;/code>&lt;/pre>&lt;p>With this command we are validating that the API is up and running properly, because the expected answer is &lt;code>{&amp;quot;message&amp;quot;:&amp;quot;Not Found&amp;quot;}&lt;/code>. Also, we can see that the certificate is issued correctly by Cert Manager.&lt;/p>
&lt;h2 id="check-the-api-logs">Check the API logs&lt;/h2>
&lt;p>Command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n kre logs kre-local-admin-api-75d8bdc6b9-n4qcv
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Expected output:&lt;/p>
&lt;pre>&lt;code>2020-08-11T12:35:25.356756843Z INFO MongoDB connecting...
2020-08-11T12:35:25.356831185Z INFO MongoDB ping...
2020-08-11T12:35:25.371577437Z INFO MongoDB connected
2020-08-11T12:35:25.372054104Z INFO [RBAC] Reloading user roles
2020-08-11T12:35:25.372382218Z INFO [RBAC] Removing roles for user kre_admin_user (dev@local.local)
2020-08-11T12:35:25.372396432Z INFO [RBAC] Adding role ADMIN to user kre_admin_user (dev@local.local)
2020-08-11T12:35:25.372769609Z INFO HTTP server started on :80
2020-08-11T12:35:29.48550533Z INFO Request from user kre_admin_user
2020-08-11T12:35:29.501522116Z INFO Request from user kre_admin_user
2020-08-11T12:35:30.479367476Z INFO Request from user kre_admin_user
&lt;/code>&lt;/pre>&lt;p>We should see at the very beginning of the API logs that the connection to MongoDB is fine and the service have started.&lt;/p></description></item><item><title>Docs: Customization</title><link>https://konstellation-io.github.io/website/docs/kre/installation/customization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://konstellation-io.github.io/website/docs/kre/installation/customization/</guid><description>
&lt;p>It is posible to configure a lot of aspects of a KRE deployment, depending on your environment and your usecase the default values are not enough.
Below are described all the parameters suceptible to be changed to adapt KRE Helm Chart to your environment. You can create your own &lt;code>values.yaml&lt;/code> with these
parameters customized to be applied when run Helm. In order to get a more clear idea where can find
the parameter that you need to modify we have split the parameters in some sections by configuration goals.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#config">Config&lt;/a>&lt;/li>
&lt;li>&lt;a href="#runtime">Runtime&lt;/a>&lt;/li>
&lt;li>&lt;a href="#admin-api">Admin API&lt;/a>&lt;/li>
&lt;li>&lt;a href="#admin-ui">Admin UI&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mongodb">MongoDB&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cert-manager">Cert Manager&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#dns01">DNS01&lt;/a>&lt;/li>
&lt;li>&lt;a href="#http01">HTTP01&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#prometheus">Prometheus&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="config">Config&lt;/h2>
&lt;p>Under this section are all the parameters that are used by multiple components in order to not repeat, also general
configuration related with the behaviour of KRE and not just specific components requirements like Docker images, services ports,
storage size, etc.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>config.baseDomainName&lt;/code>&lt;/td>
&lt;td>Domain name used to access KRE&lt;/td>
&lt;td>&lt;code>local&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.apiAddress&lt;/code>&lt;/td>
&lt;td>Base internal URL for Api Server&lt;/td>
&lt;td>&lt;code>:3000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.apiBaseURL&lt;/code>&lt;/td>
&lt;td>Base public URL for Api Server&lt;/td>
&lt;td>&lt;code>api.kre.local&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.frontendBaseURL&lt;/code>&lt;/td>
&lt;td>Base URL to connect from frontent&lt;/td>
&lt;td>&lt;code>http://localhost:3000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.corsEnabled&lt;/code>&lt;/td>
&lt;td>Activate CORS in Admin API&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.admin.userEmail&lt;/code>&lt;/td>
&lt;td>Emain for default Admin user&lt;/td>
&lt;td>&lt;code>dev@local.local&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.enabled&lt;/code>&lt;/td>
&lt;td>Activate SMTP&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.sender&lt;/code>&lt;/td>
&lt;td>SMTP Sender Email&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.senderName&lt;/code>&lt;/td>
&lt;td>SMTP Sender Name&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.user&lt;/code>&lt;/td>
&lt;td>SMTP User to connect&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.pass&lt;/code>&lt;/td>
&lt;td>SMTP Password to connect&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.host&lt;/code>&lt;/td>
&lt;td>SMTP Host to connect&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.smtp.port&lt;/code>&lt;/td>
&lt;td>SMTP Port to connect&lt;/td>
&lt;td>&amp;lt;not_defined&amp;gt;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.auth.verificationCodeDurationInMinutes&lt;/code>&lt;/td>
&lt;td>User Verification Code Duration In Minutes&lt;/td>
&lt;td>&lt;code>1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.auth.jwtSignSecret&lt;/code>&lt;/td>
&lt;td>JWT Sign Secret Key&lt;/td>
&lt;td>&lt;code>jwt_secret&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.auth.secureCookie&lt;/code>&lt;/td>
&lt;td>Activate secure cookie&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="runtime">Runtime&lt;/h2>
&lt;p>Within &lt;code>config.runtime&lt;/code> you can setup some parameters that will affect when a new Runtime is created, for example the storageClass
to create the volumes of the base service of a runtime.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>config.runtime.sharedStorageClass&lt;/code>&lt;/td>
&lt;td>StorageClass to use RWX volume for Minio and Runners on Runtimes&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.sharedStorageSize&lt;/code>&lt;/td>
&lt;td>Volume size for Minio and Runners on Runtimes&lt;/td>
&lt;td>&lt;code>2Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.nats_streaming.storage.className&lt;/code>&lt;/td>
&lt;td>StorageClass to create volumes for NATS pods&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.nats_streaming.storage.size&lt;/code>&lt;/td>
&lt;td>Size of volume attached to NATS Pod&lt;/td>
&lt;td>&lt;code>1Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.mongodb.persistentVolume.enabled&lt;/code>&lt;/td>
&lt;td>This parameter enable the persistence of MongoDB&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.mongodb.persistentVolume.storageClass&lt;/code>&lt;/td>
&lt;td>StorageClass to create volumes for MongoDB&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.mongodb.persistentVolume.size&lt;/code>&lt;/td>
&lt;td>Size of volume attached to MongoDB Pod&lt;/td>
&lt;td>&lt;code>5Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.chronograf.persistentVolume.enabled&lt;/code>&lt;/td>
&lt;td>This parameter enable the persistence of Chronograf&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.chronograf.persistentVolume.storageClass&lt;/code>&lt;/td>
&lt;td>StorageClass to create volumes for Chronograf&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.chronograf.persistentVolume.size&lt;/code>&lt;/td>
&lt;td>Size of volume attached to Chronograf Pod&lt;/td>
&lt;td>&lt;code>1Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.influxdb.persistentVolume.enabled&lt;/code>&lt;/td>
&lt;td>This parameter enable the persistence of InfluxDB&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.influxdb.persistentVolume.storageClass&lt;/code>&lt;/td>
&lt;td>StorageClass to create volumes for InfluxDB&lt;/td>
&lt;td>&lt;code>standard&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>config.runtime.influxdb.persistentVolume.size&lt;/code>&lt;/td>
&lt;td>Size of volume attached to InfluxDB Pod&lt;/td>
&lt;td>&lt;code>5Gi&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="admin-api">Admin API&lt;/h2>
&lt;p>Specific configuration for Admin API&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>admin-api.image.repository&lt;/code>&lt;/td>
&lt;td>Docker registry to download the admin-api image&lt;/td>
&lt;td>&lt;code>konstellation/kre-admin-api&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.image.tag&lt;/code>&lt;/td>
&lt;td>Version of the admin-api Docker image to deploy&lt;/td>
&lt;td>&lt;code>latest&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.image.pullPolicy&lt;/code>&lt;/td>
&lt;td>Define when Kubernetes has to pull a Docker image&lt;/td>
&lt;td>&lt;code>IfNotPresent&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.service.port&lt;/code>&lt;/td>
&lt;td>TCP port where is going to listen the internal service&lt;/td>
&lt;td>&lt;code>4000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.tls.enabled&lt;/code>&lt;/td>
&lt;td>If we want to enable HTTPS access to the API. For this Cert Manager is required in the Kuberentes cluster&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-api.host&lt;/code>&lt;/td>
&lt;td>Public hostname to generate SSL certificate with Cert Manager&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="admin-ui">Admin UI&lt;/h2>
&lt;p>Specific configuration for Admin UI&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>admin-ui.image.repository&lt;/code>&lt;/td>
&lt;td>Docker registry to download the admin-ui image&lt;/td>
&lt;td>&lt;code>konstellation/kre-admin-ui&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.image.tag&lt;/code>&lt;/td>
&lt;td>Version of the admin-ui Docker image to deploy&lt;/td>
&lt;td>&lt;code>latest&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.image.pullPolicy&lt;/code>&lt;/td>
&lt;td>Define when Kubernetes has to pull a Docker image&lt;/td>
&lt;td>&lt;code>IfNotPresent&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.service.port&lt;/code>&lt;/td>
&lt;td>TCP port where is going to listen the internal service&lt;/td>
&lt;td>&lt;code>5000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.tls.enabled&lt;/code>&lt;/td>
&lt;td>If we want to enable HTTPS access to the UI. For this Cert Manager is required in the Kuberentes cluster&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>admin-ui.host&lt;/code>&lt;/td>
&lt;td>Public hostname to generate SSL certificate with Cert Manager&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="mongodb">MongoDB&lt;/h2>
&lt;p>Specific configuration for the MongoDB on the Engine.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>mongodb.mongodbDatabase&lt;/code>&lt;/td>
&lt;td>Database to create&lt;/td>
&lt;td>&lt;code>localKRE&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mongodb.mongodbUsername&lt;/code>&lt;/td>
&lt;td>MongoDB custom user (mandatory if &lt;code>mongodbDatabase&lt;/code> is set)&lt;/td>
&lt;td>&lt;code>admin&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mongodb.mongodbPassword&lt;/code>&lt;/td>
&lt;td>MongoDB custom user password&lt;/td>
&lt;td>&lt;code>123456&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mongodb.image.tag&lt;/code>&lt;/td>
&lt;td>MongoDB version 4.2&lt;/td>
&lt;td>&lt;code>3.6&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="cert-manager">Cert Manager&lt;/h2>
&lt;p>As described on previous sections of this guide KRE use Cert Manager to manage the lifecycle of the certificates to
add a security layer on the comunication from outside.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>certManager.enabled&lt;/code>&lt;/td>
&lt;td>Enable Cert Manager to validate certificates&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.acme.server&lt;/code>&lt;/td>
&lt;td>Default certificate authority server to validate certificates, more instructions below&lt;/td>
&lt;td>&lt;code>acme-v02.api.letsencrypt.org/directory&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.acme.email&lt;/code>&lt;/td>
&lt;td>Default email for the certificate owner&lt;/td>
&lt;td>&lt;code>user@email.com&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can fill in the field &lt;code>certManager.acme.server&lt;/code> with one of the following values depend of your environment:&lt;/p>
&lt;p>&lt;strong>Production environment&lt;/strong>&lt;/p>
&lt;pre>&lt;code> certManager:
acme:
server: https://acme-v02.api.letsencrypt.org/directory
&lt;/code>&lt;/pre>&lt;p>Rate limit of 50 per day on certificates request with a week block if the limit is passed.&lt;a href="https://letsencrypt.org/docs/rate-limits/">+ info&lt;/a>&lt;/p>
&lt;p>No web-browser action required.&lt;/p>
&lt;p>&lt;strong>Staging environment&lt;/strong>&lt;/p>
&lt;pre>&lt;code> certManager:
acme:
server: https://acme-staging-v02.api.letsencrypt.org/directory
&lt;/code>&lt;/pre>&lt;p>Rate limit of 1500 each three hours on certificates request.&lt;a href="https://letsencrypt.org/docs/staging-environment/">+ Info&lt;/a>&lt;/p>
&lt;p>This option needs the following action from user to set-up the staging certification authority.&lt;/p>
&lt;p>&lt;strong>How add the fake certificate on chrome&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Download the certificate &lt;a href="https://letsencrypt.org/certs/fakeleintermediatex1.pem">Fake Certificate&lt;/a>&lt;/li>
&lt;li>Go to settings -&amp;gt; Search Certificates -&amp;gt; Manage Certificates -&amp;gt; Issuers Entities&lt;/li>
&lt;li>Import the previous certificate.&lt;/li>
&lt;li>Enable the first option.&lt;/li>
&lt;li>Reload the https://admin.&lt;your-domain> page&lt;/li>
&lt;li>You have a certificate for any kre domain.&lt;/li>
&lt;/ul>
&lt;p>Regarding the challenge method used for validation of the CSR we are going to describe two kinds supported by Cert Manager, but
may be there are another methods that fits better for your environment, please refer to the &lt;a href="https://cert-manager.io/docs/configuration/">Cert Manager documentation&lt;/a> in order to
create a more accurate configuration.&lt;/p>
&lt;h3 id="dns01">DNS01&lt;/h3>
&lt;p>If you hosted the subdomain &lt;code>kre.yourdomain.com&lt;/code> in Route53 is posible to configure the validation of the CSR with DNS via a
Route53 plugin. Below there is a snippet of config to add to your &lt;code>values.yaml&lt;/code> to configure this challenge. This is very
usefull in deployments that are behind a firewall with restricted access from Internet or just in a private network.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>certManager.dns01.route53.region&lt;/code>&lt;/td>
&lt;td>AWS Region where the hosted zome is created&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.dns01.route53.hostedZoneID&lt;/code>&lt;/td>
&lt;td>AWS Hosted Zone ID&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.dns01.route53.accessKeyID&lt;/code>&lt;/td>
&lt;td>AWS Access Key ID&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>certManager.dns01.route53.secretAccessKey&lt;/code>&lt;/td>
&lt;td>AWS Access Secret Key&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="http01">HTTP01&lt;/h3>
&lt;p>When KRE is open to Internet and you can not configure your subdomain to be hosted in Route53 you can use this challenge.
The validation is done just with a HTTP request from the Let&amp;rsquo;s Encrypt servers. Just need to set as enable.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>certManager.http01.enabled&lt;/code>&lt;/td>
&lt;td>Enable the HTTP01 challenge&lt;/td>
&lt;td>&lt;code>&amp;lt;not_defined&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="prometheus">Prometheus&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>prometheusOperator.enabled&lt;/code>&lt;/td>
&lt;td>This parameter indicate if you want that when KRE is deployed also deploy Prometheus Operator, may be you have already deployed this on your cluster and is not required to be installed.&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>prometheusOperator.grafana.enabled&lt;/code>&lt;/td>
&lt;td>Disable the installation of Grafana with the Prometheus Operator&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>